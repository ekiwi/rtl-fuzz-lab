circuit TLI2C :
  module TLI2C : 
    input clock : Clock
    input reset : UInt<1>
    output auto : {int_out : UInt<1>[1], flip in : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}}
    output io : {port : {scl : {flip in : UInt<1>, out : UInt<1>, oe : UInt<1>}, sda : {flip in : UInt<1>, out : UInt<1>, oe : UInt<1>}}}
    
    clock is invalid
    reset is invalid
    auto is invalid
    io is invalid
    wire _T_26 : {a : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, data : UInt<32>, error : UInt<1>}}, flip d : {flip ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, data : UInt<32>, error : UInt<1>}}, e : {flip ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}} @[Nodes.scala 329:76]
    _T_26 is invalid @[Nodes.scala 329:76]
    inst TLMonitor of TLMonitor_72 @[Nodes.scala 25:25]
    TLMonitor.io is invalid
    TLMonitor.clock <= clock
    TLMonitor.reset <= reset
    wire _T_54 : {a : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, b : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, data : UInt<32>, error : UInt<1>}}, d : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, data : UInt<32>, error : UInt<1>}}, e : {ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}} @[Bundles.scala 234:19]
    _T_54 is invalid @[Bundles.scala 234:19]
    wire _T_61 : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}} @[Bundles.scala 214:19]
    _T_61 is invalid @[Bundles.scala 214:19]
    _T_61.ready <= _T_26.a.ready @[Bundles.scala 215:15]
    _T_61.valid <= _T_26.a.valid @[Bundles.scala 216:15]
    _T_61.bits <- _T_26.a.bits @[Bundles.scala 217:15]
    _T_54.a <- _T_61 @[Bundles.scala 235:11]
    wire _T_63 : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}} @[Bundles.scala 214:19]
    _T_63 is invalid @[Bundles.scala 214:19]
    _T_63.ready <= _T_26.b.ready @[Bundles.scala 215:15]
    _T_63.valid <= _T_26.b.valid @[Bundles.scala 216:15]
    _T_63.bits <- _T_26.b.bits @[Bundles.scala 217:15]
    _T_54.b <- _T_63 @[Bundles.scala 236:11]
    wire _T_65 : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, data : UInt<32>, error : UInt<1>}} @[Bundles.scala 214:19]
    _T_65 is invalid @[Bundles.scala 214:19]
    _T_65.ready <= _T_26.c.ready @[Bundles.scala 215:15]
    _T_65.valid <= _T_26.c.valid @[Bundles.scala 216:15]
    _T_65.bits <- _T_26.c.bits @[Bundles.scala 217:15]
    _T_54.c <- _T_65 @[Bundles.scala 237:11]
    wire _T_67 : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, data : UInt<32>, error : UInt<1>}} @[Bundles.scala 214:19]
    _T_67 is invalid @[Bundles.scala 214:19]
    _T_67.ready <= _T_26.d.ready @[Bundles.scala 215:15]
    _T_67.valid <= _T_26.d.valid @[Bundles.scala 216:15]
    _T_67.bits <- _T_26.d.bits @[Bundles.scala 217:15]
    _T_54.d <- _T_67 @[Bundles.scala 238:11]
    wire _T_69 : {ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}} @[Bundles.scala 214:19]
    _T_69 is invalid @[Bundles.scala 214:19]
    _T_69.ready <= _T_26.e.ready @[Bundles.scala 215:15]
    _T_69.valid <= _T_26.e.valid @[Bundles.scala 216:15]
    _T_69.bits <- _T_26.e.bits @[Bundles.scala 217:15]
    _T_54.e <- _T_69 @[Bundles.scala 239:11]
    TLMonitor.io.in <- _T_54 @[Nodes.scala 26:19]
    wire interrupts : UInt<1>[1] @[Nodes.scala 328:76]
    interrupts is invalid @[Nodes.scala 328:76]
    _T_26 <- auto.in @[LazyModule.scala 171:31]
    auto.int_out <- interrupts @[LazyModule.scala 171:49]
    wire _T_182 : {hi : UInt<8>, lo : UInt<8>} @[I2C.scala 109:63]
    _T_182 is invalid @[I2C.scala 109:63]
    wire _T_184 : UInt<16>
    _T_184 is invalid
    _T_184 <= UInt<16>("h0ffff")
    node _T_185 = bits(_T_184, 7, 0) @[I2C.scala 109:63]
    _T_182.lo <= _T_185 @[I2C.scala 109:63]
    node _T_186 = bits(_T_184, 15, 8) @[I2C.scala 109:63]
    _T_182.hi <= _T_186 @[I2C.scala 109:63]
    reg prescaler : {hi : UInt<8>, lo : UInt<8>}, clock with : (reset => (reset, _T_182)) @[I2C.scala 109:25]
    wire _T_191 : {coreEn : UInt<1>, intEn : UInt<1>, reserved : UInt<6>} @[I2C.scala 110:61]
    _T_191 is invalid @[I2C.scala 110:61]
    wire _T_193 : UInt<8>
    _T_193 is invalid
    _T_193 <= UInt<1>("h00")
    node _T_194 = bits(_T_193, 5, 0) @[I2C.scala 110:61]
    _T_191.reserved <= _T_194 @[I2C.scala 110:61]
    node _T_195 = bits(_T_193, 6, 6) @[I2C.scala 110:61]
    _T_191.intEn <= _T_195 @[I2C.scala 110:61]
    node _T_196 = bits(_T_193, 7, 7) @[I2C.scala 110:61]
    _T_191.coreEn <= _T_196 @[I2C.scala 110:61]
    reg control : {coreEn : UInt<1>, intEn : UInt<1>, reserved : UInt<6>}, clock with : (reset => (reset, _T_191)) @[I2C.scala 110:25]
    reg transmitData : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[I2C.scala 111:25]
    reg receivedData : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[I2C.scala 112:25]
    wire _T_205 : {start : UInt<1>, stop : UInt<1>, read : UInt<1>, write : UInt<1>, ack : UInt<1>, reserved : UInt<2>, irqAck : UInt<1>} @[I2C.scala 113:61]
    _T_205 is invalid @[I2C.scala 113:61]
    wire _T_207 : UInt<8>
    _T_207 is invalid
    _T_207 <= UInt<1>("h00")
    node _T_208 = bits(_T_207, 0, 0) @[I2C.scala 113:61]
    _T_205.irqAck <= _T_208 @[I2C.scala 113:61]
    node _T_209 = bits(_T_207, 2, 1) @[I2C.scala 113:61]
    _T_205.reserved <= _T_209 @[I2C.scala 113:61]
    node _T_210 = bits(_T_207, 3, 3) @[I2C.scala 113:61]
    _T_205.ack <= _T_210 @[I2C.scala 113:61]
    node _T_211 = bits(_T_207, 4, 4) @[I2C.scala 113:61]
    _T_205.write <= _T_211 @[I2C.scala 113:61]
    node _T_212 = bits(_T_207, 5, 5) @[I2C.scala 113:61]
    _T_205.read <= _T_212 @[I2C.scala 113:61]
    node _T_213 = bits(_T_207, 6, 6) @[I2C.scala 113:61]
    _T_205.stop <= _T_213 @[I2C.scala 113:61]
    node _T_214 = bits(_T_207, 7, 7) @[I2C.scala 113:61]
    _T_205.start <= _T_214 @[I2C.scala 113:61]
    reg cmd : {start : UInt<1>, stop : UInt<1>, read : UInt<1>, write : UInt<1>, ack : UInt<1>, reserved : UInt<2>, irqAck : UInt<1>}, clock with : (reset => (reset, _T_205)) @[I2C.scala 113:25]
    wire _T_219 : {receivedAck : UInt<1>, busy : UInt<1>, arbLost : UInt<1>, reserved : UInt<3>, transferInProgress : UInt<1>, irqFlag : UInt<1>} @[I2C.scala 114:60]
    _T_219 is invalid @[I2C.scala 114:60]
    wire _T_221 : UInt<8>
    _T_221 is invalid
    _T_221 <= UInt<1>("h00")
    node _T_222 = bits(_T_221, 0, 0) @[I2C.scala 114:60]
    _T_219.irqFlag <= _T_222 @[I2C.scala 114:60]
    node _T_223 = bits(_T_221, 1, 1) @[I2C.scala 114:60]
    _T_219.transferInProgress <= _T_223 @[I2C.scala 114:60]
    node _T_224 = bits(_T_221, 4, 2) @[I2C.scala 114:60]
    _T_219.reserved <= _T_224 @[I2C.scala 114:60]
    node _T_225 = bits(_T_221, 5, 5) @[I2C.scala 114:60]
    _T_219.arbLost <= _T_225 @[I2C.scala 114:60]
    node _T_226 = bits(_T_221, 6, 6) @[I2C.scala 114:60]
    _T_219.busy <= _T_226 @[I2C.scala 114:60]
    node _T_227 = bits(_T_221, 7, 7) @[I2C.scala 114:60]
    _T_219.receivedAck <= _T_227 @[I2C.scala 114:60]
    reg status : {receivedAck : UInt<1>, busy : UInt<1>, arbLost : UInt<1>, reserved : UInt<3>, transferInProgress : UInt<1>, irqFlag : UInt<1>}, clock with : (reset => (reset, _T_219)) @[I2C.scala 114:25]
    io.port.scl.out <= UInt<1>("h00") @[I2C.scala 119:19]
    io.port.sda.out <= UInt<1>("h00") @[I2C.scala 120:19]
    reg filterCnt : UInt<14>, clock with : (reset => (reset, UInt<14>("h00"))) @[I2C.scala 123:22]
    node _T_234 = eq(control.coreEn, UInt<1>("h00")) @[I2C.scala 124:10]
    when _T_234 : @[I2C.scala 124:28]
      filterCnt <= UInt<1>("h00") @[I2C.scala 125:15]
      skip @[I2C.scala 124:28]
    else : @[I2C.scala 126:34]
      node _T_237 = neq(filterCnt, UInt<1>("h00")) @[I2C.scala 126:28]
      node _T_239 = eq(_T_237, UInt<1>("h00")) @[I2C.scala 126:16]
      when _T_239 : @[I2C.scala 126:34]
        node _T_240 = cat(prescaler.hi, prescaler.lo) @[Cat.scala 30:58]
        node _T_241 = shr(_T_240, 2) @[I2C.scala 127:50]
        filterCnt <= _T_241 @[I2C.scala 127:15]
        skip @[I2C.scala 126:34]
      else : @[I2C.scala 128:16]
        node _T_243 = sub(filterCnt, UInt<1>("h01")) @[I2C.scala 129:28]
        node _T_244 = asUInt(_T_243) @[I2C.scala 129:28]
        node _T_245 = tail(_T_244, 1) @[I2C.scala 129:28]
        filterCnt <= _T_245 @[I2C.scala 129:15]
        skip @[I2C.scala 128:16]
    reg fSCL : UInt<3>, clock with : (reset => (reset, UInt<3>("h07"))) @[I2C.scala 132:22]
    reg fSDA : UInt<3>, clock with : (reset => (reset, UInt<3>("h07"))) @[I2C.scala 133:22]
    node _T_251 = neq(filterCnt, UInt<1>("h00")) @[I2C.scala 134:21]
    node _T_253 = eq(_T_251, UInt<1>("h00")) @[I2C.scala 134:9]
    when _T_253 : @[I2C.scala 134:27]
      node _T_254 = cat(fSCL, io.port.scl.in) @[Cat.scala 30:58]
      fSCL <= _T_254 @[I2C.scala 135:10]
      node _T_255 = cat(fSDA, io.port.sda.in) @[Cat.scala 30:58]
      fSDA <= _T_255 @[I2C.scala 136:10]
      skip @[I2C.scala 134:27]
    node _T_257 = bits(fSCL, 0, 0) @[Misc.scala 208:40]
    node _T_258 = bits(fSCL, 1, 1) @[Misc.scala 208:40]
    node _T_259 = bits(fSCL, 2, 2) @[Misc.scala 208:40]
    node _T_260 = and(_T_257, _T_258) @[Misc.scala 202:48]
    node _T_261 = and(_T_257, _T_259) @[Misc.scala 202:48]
    node _T_262 = or(_T_260, _T_261) @[Misc.scala 203:22]
    node _T_263 = and(_T_258, _T_259) @[Misc.scala 202:48]
    node _T_264 = or(_T_262, _T_263) @[Misc.scala 203:22]
    reg sSCL : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 139:22]
    sSCL <= _T_264 @[I2C.scala 139:22]
    node _T_267 = bits(fSDA, 0, 0) @[Misc.scala 208:40]
    node _T_268 = bits(fSDA, 1, 1) @[Misc.scala 208:40]
    node _T_269 = bits(fSDA, 2, 2) @[Misc.scala 208:40]
    node _T_270 = and(_T_267, _T_268) @[Misc.scala 202:48]
    node _T_271 = and(_T_267, _T_269) @[Misc.scala 202:48]
    node _T_272 = or(_T_270, _T_271) @[Misc.scala 203:22]
    node _T_273 = and(_T_268, _T_269) @[Misc.scala 202:48]
    node _T_274 = or(_T_272, _T_273) @[Misc.scala 203:22]
    reg sSDA : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 140:22]
    sSDA <= _T_274 @[I2C.scala 140:22]
    reg dSCL : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 142:22]
    dSCL <= sSCL @[I2C.scala 142:22]
    reg dSDA : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 143:22]
    dSDA <= sSDA @[I2C.scala 143:22]
    reg dSCLOen : UInt<1>, clock @[I2C.scala 145:22]
    dSCLOen <= io.port.scl.oe @[I2C.scala 145:22]
    node _T_283 = eq(sSDA, UInt<1>("h00")) @[I2C.scala 149:46]
    node _T_284 = and(_T_283, dSDA) @[I2C.scala 149:52]
    node _T_285 = and(_T_284, sSCL) @[I2C.scala 149:61]
    reg startCond : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 149:22]
    startCond <= _T_285 @[I2C.scala 149:22]
    node _T_289 = eq(dSDA, UInt<1>("h00")) @[I2C.scala 150:55]
    node _T_290 = and(sSDA, _T_289) @[I2C.scala 150:52]
    node _T_291 = and(_T_290, sSCL) @[I2C.scala 150:61]
    reg stopCond : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 150:22]
    stopCond <= _T_291 @[I2C.scala 150:22]
    node _T_294 = eq(sSCL, UInt<1>("h00")) @[I2C.scala 154:27]
    node _T_295 = and(dSCL, _T_294) @[I2C.scala 154:24]
    node sclSync = and(_T_295, io.port.scl.oe) @[I2C.scala 154:33]
    reg slaveWait : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 158:22]
    node _T_299 = eq(dSCLOen, UInt<1>("h00")) @[I2C.scala 159:35]
    node _T_300 = and(io.port.scl.oe, _T_299) @[I2C.scala 159:32]
    node _T_302 = eq(sSCL, UInt<1>("h00")) @[I2C.scala 159:47]
    node _T_303 = and(_T_300, _T_302) @[I2C.scala 159:44]
    node _T_305 = eq(sSCL, UInt<1>("h00")) @[I2C.scala 159:71]
    node _T_306 = and(slaveWait, _T_305) @[I2C.scala 159:68]
    node _T_307 = or(_T_303, _T_306) @[I2C.scala 159:54]
    slaveWait <= _T_307 @[I2C.scala 159:13]
    reg clkEn : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 161:22]
    reg cnt : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[I2C.scala 162:22]
    node _T_313 = neq(cnt, UInt<1>("h00")) @[I2C.scala 165:15]
    node _T_315 = eq(_T_313, UInt<1>("h00")) @[I2C.scala 165:9]
    node _T_317 = eq(control.coreEn, UInt<1>("h00")) @[I2C.scala 165:23]
    node _T_318 = or(_T_315, _T_317) @[I2C.scala 165:20]
    node _T_319 = or(_T_318, sclSync) @[I2C.scala 165:39]
    when _T_319 : @[I2C.scala 165:52]
      node _T_320 = cat(prescaler.hi, prescaler.lo) @[Cat.scala 30:58]
      cnt <= _T_320 @[I2C.scala 166:11]
      clkEn <= UInt<1>("h01") @[I2C.scala 167:11]
      skip @[I2C.scala 165:52]
    else : @[I2C.scala 169:25]
      when slaveWait : @[I2C.scala 169:25]
        clkEn <= UInt<1>("h00") @[I2C.scala 170:11]
        skip @[I2C.scala 169:25]
      else : @[I2C.scala 172:14]
        node _T_324 = sub(cnt, UInt<1>("h01")) @[I2C.scala 173:18]
        node _T_325 = asUInt(_T_324) @[I2C.scala 173:18]
        node _T_326 = tail(_T_325, 1) @[I2C.scala 173:18]
        cnt <= _T_326 @[I2C.scala 173:11]
        clkEn <= UInt<1>("h00") @[I2C.scala 174:11]
        skip @[I2C.scala 172:14]
    reg sclOen : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 177:23]
    node _T_331 = eq(sclOen, UInt<1>("h00")) @[I2C.scala 178:21]
    io.port.scl.oe <= _T_331 @[I2C.scala 178:18]
    reg sdaOen : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 180:23]
    node _T_335 = eq(sdaOen, UInt<1>("h00")) @[I2C.scala 181:21]
    io.port.sda.oe <= _T_335 @[I2C.scala 181:18]
    reg sdaChk : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 183:23]
    reg transmitBit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 185:24]
    reg receivedBit : UInt<1>, clock @[I2C.scala 186:24]
    node _T_342 = eq(dSCL, UInt<1>("h00")) @[I2C.scala 187:17]
    node _T_343 = and(sSCL, _T_342) @[I2C.scala 187:14]
    when _T_343 : @[I2C.scala 187:24]
      receivedBit <= sSDA @[I2C.scala 188:17]
      skip @[I2C.scala 187:24]
    reg bitCmd : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[I2C.scala 191:24]
    reg bitCmdStop : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 192:24]
    when clkEn : @[I2C.scala 193:16]
      node _T_348 = eq(bitCmd, UInt<2>("h02")) @[I2C.scala 194:26]
      bitCmdStop <= _T_348 @[I2C.scala 194:16]
      skip @[I2C.scala 193:16]
    reg bitCmdAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 196:24]
    reg bitState : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[I2C.scala 203:24]
    node _T_355 = eq(sSDA, UInt<1>("h00")) @[I2C.scala 205:59]
    node _T_356 = and(sdaChk, _T_355) @[I2C.scala 205:56]
    node _T_357 = and(_T_356, sdaOen) @[I2C.scala 205:65]
    node _T_358 = neq(bitState, UInt<5>("h00")) @[I2C.scala 205:89]
    node _T_359 = and(_T_358, stopCond) @[I2C.scala 205:105]
    node _T_361 = eq(bitCmdStop, UInt<1>("h00")) @[I2C.scala 205:120]
    node _T_362 = and(_T_359, _T_361) @[I2C.scala 205:117]
    node _T_363 = or(_T_357, _T_362) @[I2C.scala 205:76]
    reg arbLost : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 205:24]
    arbLost <= _T_363 @[I2C.scala 205:24]
    when arbLost : @[I2C.scala 208:18]
      bitState <= UInt<5>("h00") @[I2C.scala 209:15]
      bitCmdAck <= UInt<1>("h00") @[I2C.scala 210:15]
      sclOen <= UInt<1>("h01") @[I2C.scala 211:15]
      sdaOen <= UInt<1>("h01") @[I2C.scala 212:15]
      sdaChk <= UInt<1>("h00") @[I2C.scala 213:15]
      skip @[I2C.scala 208:18]
    else : @[I2C.scala 215:14]
      bitCmdAck <= UInt<1>("h00") @[I2C.scala 216:15]
      when clkEn : @[I2C.scala 218:18]
        node _T_370 = eq(UInt<5>("h00"), bitState) @[Conditional.scala 37:30]
        when _T_370 : @[Conditional.scala 40:58]
          node _T_371 = eq(UInt<1>("h01"), bitCmd) @[Conditional.scala 37:30]
          when _T_371 : @[Conditional.scala 40:58]
            bitState <= UInt<5>("h01") @[I2C.scala 222:43]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_372 = eq(UInt<2>("h02"), bitCmd) @[Conditional.scala 37:30]
            when _T_372 : @[Conditional.scala 39:67]
              bitState <= UInt<5>("h06") @[I2C.scala 223:43]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_373 = eq(UInt<3>("h04"), bitCmd) @[Conditional.scala 37:30]
              when _T_373 : @[Conditional.scala 39:67]
                bitState <= UInt<5>("h0e") @[I2C.scala 224:43]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_374 = eq(UInt<4>("h08"), bitCmd) @[Conditional.scala 37:30]
                when _T_374 : @[Conditional.scala 39:67]
                  bitState <= UInt<5>("h0a") @[I2C.scala 225:43]
                  skip @[Conditional.scala 39:67]
          sdaChk <= UInt<1>("h00") @[I2C.scala 227:18]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_376 = eq(UInt<5>("h01"), bitState) @[Conditional.scala 37:30]
          when _T_376 : @[Conditional.scala 39:67]
            bitState <= UInt<5>("h02") @[I2C.scala 231:21]
            sclOen <= sclOen @[I2C.scala 232:21]
            sdaOen <= UInt<1>("h01") @[I2C.scala 233:21]
            sdaChk <= UInt<1>("h00") @[I2C.scala 234:21]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_379 = eq(UInt<5>("h02"), bitState) @[Conditional.scala 37:30]
            when _T_379 : @[Conditional.scala 39:67]
              bitState <= UInt<5>("h03") @[I2C.scala 237:21]
              sclOen <= UInt<1>("h01") @[I2C.scala 238:21]
              sdaOen <= UInt<1>("h01") @[I2C.scala 239:21]
              sdaChk <= UInt<1>("h00") @[I2C.scala 240:21]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_383 = eq(UInt<5>("h03"), bitState) @[Conditional.scala 37:30]
              when _T_383 : @[Conditional.scala 39:67]
                bitState <= UInt<5>("h04") @[I2C.scala 243:21]
                sclOen <= UInt<1>("h01") @[I2C.scala 244:21]
                sdaOen <= UInt<1>("h00") @[I2C.scala 245:21]
                sdaChk <= UInt<1>("h00") @[I2C.scala 246:21]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_387 = eq(UInt<5>("h04"), bitState) @[Conditional.scala 37:30]
                when _T_387 : @[Conditional.scala 39:67]
                  bitState <= UInt<5>("h05") @[I2C.scala 249:21]
                  sclOen <= UInt<1>("h01") @[I2C.scala 250:21]
                  sdaOen <= UInt<1>("h00") @[I2C.scala 251:21]
                  sdaChk <= UInt<1>("h00") @[I2C.scala 252:21]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_391 = eq(UInt<5>("h05"), bitState) @[Conditional.scala 37:30]
                  when _T_391 : @[Conditional.scala 39:67]
                    bitState <= UInt<5>("h00") @[I2C.scala 255:21]
                    bitCmdAck <= UInt<1>("h01") @[I2C.scala 256:21]
                    sclOen <= UInt<1>("h00") @[I2C.scala 257:21]
                    sdaOen <= UInt<1>("h00") @[I2C.scala 258:21]
                    sdaChk <= UInt<1>("h00") @[I2C.scala 259:21]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_396 = eq(UInt<5>("h06"), bitState) @[Conditional.scala 37:30]
                    when _T_396 : @[Conditional.scala 39:67]
                      bitState <= UInt<5>("h07") @[I2C.scala 263:21]
                      sclOen <= UInt<1>("h00") @[I2C.scala 264:21]
                      sdaOen <= UInt<1>("h00") @[I2C.scala 265:21]
                      sdaChk <= UInt<1>("h00") @[I2C.scala 266:21]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_400 = eq(UInt<5>("h07"), bitState) @[Conditional.scala 37:30]
                      when _T_400 : @[Conditional.scala 39:67]
                        bitState <= UInt<5>("h08") @[I2C.scala 269:21]
                        sclOen <= UInt<1>("h01") @[I2C.scala 270:21]
                        sdaOen <= UInt<1>("h00") @[I2C.scala 271:21]
                        sdaChk <= UInt<1>("h00") @[I2C.scala 272:21]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_404 = eq(UInt<5>("h08"), bitState) @[Conditional.scala 37:30]
                        when _T_404 : @[Conditional.scala 39:67]
                          bitState <= UInt<5>("h09") @[I2C.scala 275:21]
                          sclOen <= UInt<1>("h01") @[I2C.scala 276:21]
                          sdaOen <= UInt<1>("h00") @[I2C.scala 277:21]
                          sdaChk <= UInt<1>("h00") @[I2C.scala 278:21]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_408 = eq(UInt<5>("h09"), bitState) @[Conditional.scala 37:30]
                          when _T_408 : @[Conditional.scala 39:67]
                            bitState <= UInt<5>("h00") @[I2C.scala 281:21]
                            bitCmdAck <= UInt<1>("h01") @[I2C.scala 282:21]
                            sclOen <= UInt<1>("h01") @[I2C.scala 283:21]
                            sdaOen <= UInt<1>("h01") @[I2C.scala 284:21]
                            sdaChk <= UInt<1>("h00") @[I2C.scala 285:21]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_413 = eq(UInt<5>("h0a"), bitState) @[Conditional.scala 37:30]
                            when _T_413 : @[Conditional.scala 39:67]
                              bitState <= UInt<5>("h0b") @[I2C.scala 289:21]
                              sclOen <= UInt<1>("h00") @[I2C.scala 290:21]
                              sdaOen <= UInt<1>("h01") @[I2C.scala 291:21]
                              sdaChk <= UInt<1>("h00") @[I2C.scala 292:21]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_417 = eq(UInt<5>("h0b"), bitState) @[Conditional.scala 37:30]
                              when _T_417 : @[Conditional.scala 39:67]
                                bitState <= UInt<5>("h0c") @[I2C.scala 295:21]
                                sclOen <= UInt<1>("h01") @[I2C.scala 296:21]
                                sdaOen <= UInt<1>("h01") @[I2C.scala 297:21]
                                sdaChk <= UInt<1>("h00") @[I2C.scala 298:21]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_421 = eq(UInt<5>("h0c"), bitState) @[Conditional.scala 37:30]
                                when _T_421 : @[Conditional.scala 39:67]
                                  bitState <= UInt<5>("h0d") @[I2C.scala 301:21]
                                  sclOen <= UInt<1>("h01") @[I2C.scala 302:21]
                                  sdaOen <= UInt<1>("h01") @[I2C.scala 303:21]
                                  sdaChk <= UInt<1>("h00") @[I2C.scala 304:21]
                                  skip @[Conditional.scala 39:67]
                                else : @[Conditional.scala 39:67]
                                  node _T_425 = eq(UInt<5>("h0d"), bitState) @[Conditional.scala 37:30]
                                  when _T_425 : @[Conditional.scala 39:67]
                                    bitState <= UInt<5>("h00") @[I2C.scala 307:21]
                                    bitCmdAck <= UInt<1>("h01") @[I2C.scala 308:21]
                                    sclOen <= UInt<1>("h00") @[I2C.scala 309:21]
                                    sdaOen <= UInt<1>("h01") @[I2C.scala 310:21]
                                    sdaChk <= UInt<1>("h00") @[I2C.scala 311:21]
                                    skip @[Conditional.scala 39:67]
                                  else : @[Conditional.scala 39:67]
                                    node _T_430 = eq(UInt<5>("h0e"), bitState) @[Conditional.scala 37:30]
                                    when _T_430 : @[Conditional.scala 39:67]
                                      bitState <= UInt<5>("h0f") @[I2C.scala 315:21]
                                      sclOen <= UInt<1>("h00") @[I2C.scala 316:21]
                                      sdaOen <= transmitBit @[I2C.scala 317:21]
                                      sdaChk <= UInt<1>("h00") @[I2C.scala 318:21]
                                      skip @[Conditional.scala 39:67]
                                    else : @[Conditional.scala 39:67]
                                      node _T_433 = eq(UInt<5>("h0f"), bitState) @[Conditional.scala 37:30]
                                      when _T_433 : @[Conditional.scala 39:67]
                                        bitState <= UInt<5>("h010") @[I2C.scala 321:21]
                                        sclOen <= UInt<1>("h01") @[I2C.scala 322:21]
                                        sdaOen <= transmitBit @[I2C.scala 323:21]
                                        sdaChk <= UInt<1>("h00") @[I2C.scala 324:21]
                                        skip @[Conditional.scala 39:67]
                                      else : @[Conditional.scala 39:67]
                                        node _T_436 = eq(UInt<5>("h010"), bitState) @[Conditional.scala 37:30]
                                        when _T_436 : @[Conditional.scala 39:67]
                                          bitState <= UInt<5>("h011") @[I2C.scala 327:21]
                                          sclOen <= UInt<1>("h01") @[I2C.scala 328:21]
                                          sdaOen <= transmitBit @[I2C.scala 329:21]
                                          sdaChk <= UInt<1>("h01") @[I2C.scala 330:21]
                                          skip @[Conditional.scala 39:67]
                                        else : @[Conditional.scala 39:67]
                                          node _T_439 = eq(UInt<5>("h011"), bitState) @[Conditional.scala 37:30]
                                          when _T_439 : @[Conditional.scala 39:67]
                                            bitState <= UInt<5>("h00") @[I2C.scala 333:21]
                                            bitCmdAck <= UInt<1>("h01") @[I2C.scala 334:21]
                                            sclOen <= UInt<1>("h00") @[I2C.scala 335:21]
                                            sdaOen <= transmitBit @[I2C.scala 336:21]
                                            sdaChk <= UInt<1>("h00") @[I2C.scala 337:21]
                                            skip @[Conditional.scala 39:67]
        skip @[I2C.scala 218:18]
      skip @[I2C.scala 215:14]
    reg load : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 345:24]
    reg shift : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 346:24]
    reg cmdAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 347:24]
    reg receivedAck : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C.scala 348:24]
    node _T_451 = or(cmd.read, cmd.write) @[I2C.scala 349:31]
    node _T_452 = or(_T_451, cmd.stop) @[I2C.scala 349:43]
    node _T_454 = eq(cmdAck, UInt<1>("h00")) @[I2C.scala 349:57]
    node go = and(_T_452, _T_454) @[I2C.scala 349:55]
    reg bitCnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[I2C.scala 351:24]
    when load : @[I2C.scala 352:15]
      bitCnt <= UInt<3>("h07") @[I2C.scala 353:12]
      skip @[I2C.scala 352:15]
    else : @[I2C.scala 355:21]
      when shift : @[I2C.scala 355:21]
        node _T_459 = sub(bitCnt, UInt<1>("h01")) @[I2C.scala 356:22]
        node _T_460 = asUInt(_T_459) @[I2C.scala 356:22]
        node _T_461 = tail(_T_460, 1) @[I2C.scala 356:22]
        bitCnt <= _T_461 @[I2C.scala 356:12]
        skip @[I2C.scala 355:21]
    node _T_463 = neq(bitCnt, UInt<1>("h00")) @[I2C.scala 358:30]
    node bitCntDone = eq(_T_463, UInt<1>("h00")) @[I2C.scala 358:21]
    when load : @[I2C.scala 361:15]
      receivedData <= transmitData @[I2C.scala 362:18]
      skip @[I2C.scala 361:15]
    else : @[I2C.scala 364:21]
      when shift : @[I2C.scala 364:21]
        node _T_465 = cat(receivedData, receivedBit) @[Cat.scala 30:58]
        receivedData <= _T_465 @[I2C.scala 365:18]
        skip @[I2C.scala 364:21]
    reg byteState : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[I2C.scala 369:24]
    when arbLost : @[I2C.scala 371:18]
      bitCmd <= UInt<1>("h00") @[I2C.scala 372:17]
      transmitBit <= UInt<1>("h00") @[I2C.scala 373:17]
      shift <= UInt<1>("h00") @[I2C.scala 374:17]
      load <= UInt<1>("h00") @[I2C.scala 375:17]
      cmdAck <= UInt<1>("h00") @[I2C.scala 376:17]
      byteState <= UInt<3>("h00") @[I2C.scala 377:17]
      receivedAck <= UInt<1>("h00") @[I2C.scala 378:17]
      skip @[I2C.scala 371:18]
    else : @[I2C.scala 380:14]
      node _T_473 = bits(receivedData, 7, 7) @[I2C.scala 381:32]
      transmitBit <= _T_473 @[I2C.scala 381:17]
      shift <= UInt<1>("h00") @[I2C.scala 382:17]
      load <= UInt<1>("h00") @[I2C.scala 383:17]
      cmdAck <= UInt<1>("h00") @[I2C.scala 384:17]
      node _T_477 = eq(UInt<3>("h00"), byteState) @[Conditional.scala 37:30]
      when _T_477 : @[Conditional.scala 40:58]
        when go : @[I2C.scala 388:19]
          when cmd.start : @[I2C.scala 389:28]
            byteState <= UInt<3>("h01") @[I2C.scala 390:23]
            bitCmd <= UInt<1>("h01") @[I2C.scala 391:23]
            skip @[I2C.scala 389:28]
          else : @[I2C.scala 393:32]
            when cmd.read : @[I2C.scala 393:32]
              byteState <= UInt<3>("h02") @[I2C.scala 394:23]
              bitCmd <= UInt<4>("h08") @[I2C.scala 395:23]
              skip @[I2C.scala 393:32]
            else : @[I2C.scala 397:33]
              when cmd.write : @[I2C.scala 397:33]
                byteState <= UInt<3>("h03") @[I2C.scala 398:23]
                bitCmd <= UInt<3>("h04") @[I2C.scala 399:23]
                skip @[I2C.scala 397:33]
              else : @[I2C.scala 401:22]
                byteState <= UInt<3>("h05") @[I2C.scala 402:23]
                bitCmd <= UInt<2>("h02") @[I2C.scala 403:23]
                skip @[I2C.scala 401:22]
          load <= UInt<1>("h01") @[I2C.scala 406:23]
          skip @[I2C.scala 388:19]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_479 = eq(UInt<3>("h01"), byteState) @[Conditional.scala 37:30]
        when _T_479 : @[Conditional.scala 39:67]
          when bitCmdAck : @[I2C.scala 410:26]
            when cmd.read : @[I2C.scala 411:27]
              byteState <= UInt<3>("h02") @[I2C.scala 412:23]
              bitCmd <= UInt<4>("h08") @[I2C.scala 413:23]
              skip @[I2C.scala 411:27]
            else : @[I2C.scala 415:22]
              byteState <= UInt<3>("h03") @[I2C.scala 416:23]
              bitCmd <= UInt<3>("h04") @[I2C.scala 417:23]
              skip @[I2C.scala 415:22]
            load <= UInt<1>("h01") @[I2C.scala 420:23]
            skip @[I2C.scala 410:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_481 = eq(UInt<3>("h03"), byteState) @[Conditional.scala 37:30]
          when _T_481 : @[Conditional.scala 39:67]
            when bitCmdAck : @[I2C.scala 424:26]
              when bitCntDone : @[I2C.scala 425:29]
                byteState <= UInt<3>("h04") @[I2C.scala 426:23]
                bitCmd <= UInt<4>("h08") @[I2C.scala 427:23]
                skip @[I2C.scala 425:29]
              else : @[I2C.scala 429:22]
                byteState <= UInt<3>("h03") @[I2C.scala 430:23]
                bitCmd <= UInt<3>("h04") @[I2C.scala 431:23]
                shift <= UInt<1>("h01") @[I2C.scala 432:23]
                skip @[I2C.scala 429:22]
              skip @[I2C.scala 424:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_483 = eq(UInt<3>("h02"), byteState) @[Conditional.scala 37:30]
            when _T_483 : @[Conditional.scala 39:67]
              when bitCmdAck : @[I2C.scala 437:26]
                when bitCntDone : @[I2C.scala 438:29]
                  byteState <= UInt<3>("h04") @[I2C.scala 439:23]
                  bitCmd <= UInt<3>("h04") @[I2C.scala 440:23]
                  skip @[I2C.scala 438:29]
                else : @[I2C.scala 442:22]
                  byteState <= UInt<3>("h02") @[I2C.scala 443:23]
                  bitCmd <= UInt<4>("h08") @[I2C.scala 444:23]
                  skip @[I2C.scala 442:22]
                shift <= UInt<1>("h01") @[I2C.scala 447:23]
                transmitBit <= cmd.ack @[I2C.scala 448:23]
                skip @[I2C.scala 437:26]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_485 = eq(UInt<3>("h04"), byteState) @[Conditional.scala 37:30]
              when _T_485 : @[Conditional.scala 39:67]
                when bitCmdAck : @[I2C.scala 452:26]
                  when cmd.stop : @[I2C.scala 453:27]
                    byteState <= UInt<3>("h05") @[I2C.scala 454:23]
                    bitCmd <= UInt<2>("h02") @[I2C.scala 455:23]
                    skip @[I2C.scala 453:27]
                  else : @[I2C.scala 457:22]
                    byteState <= UInt<3>("h00") @[I2C.scala 458:23]
                    bitCmd <= UInt<1>("h00") @[I2C.scala 459:23]
                    cmdAck <= UInt<1>("h01") @[I2C.scala 462:23]
                    skip @[I2C.scala 457:22]
                  receivedAck <= receivedBit @[I2C.scala 466:23]
                  transmitBit <= UInt<1>("h01") @[I2C.scala 468:23]
                  skip @[I2C.scala 452:26]
                else : @[I2C.scala 470:20]
                  transmitBit <= cmd.ack @[I2C.scala 471:23]
                  skip @[I2C.scala 470:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_488 = eq(UInt<3>("h05"), byteState) @[Conditional.scala 37:30]
                when _T_488 : @[Conditional.scala 39:67]
                  when bitCmdAck : @[I2C.scala 475:26]
                    byteState <= UInt<3>("h00") @[I2C.scala 476:21]
                    bitCmd <= UInt<1>("h00") @[I2C.scala 477:21]
                    cmdAck <= UInt<1>("h01") @[I2C.scala 480:21]
                    skip @[I2C.scala 475:26]
                  skip @[Conditional.scala 39:67]
      skip @[I2C.scala 380:14]
    wire nextCmd : UInt<8> @[I2C.scala 490:21]
    nextCmd is invalid @[I2C.scala 490:21]
    wire _T_493 : {start : UInt<1>, stop : UInt<1>, read : UInt<1>, write : UInt<1>, ack : UInt<1>, reserved : UInt<2>, irqAck : UInt<1>} @[I2C.scala 491:38]
    _T_493 is invalid @[I2C.scala 491:38]
    wire _T_495 : UInt<8>
    _T_495 is invalid
    _T_495 <= nextCmd
    node _T_496 = bits(_T_495, 0, 0) @[I2C.scala 491:38]
    _T_493.irqAck <= _T_496 @[I2C.scala 491:38]
    node _T_497 = bits(_T_495, 2, 1) @[I2C.scala 491:38]
    _T_493.reserved <= _T_497 @[I2C.scala 491:38]
    node _T_498 = bits(_T_495, 3, 3) @[I2C.scala 491:38]
    _T_493.ack <= _T_498 @[I2C.scala 491:38]
    node _T_499 = bits(_T_495, 4, 4) @[I2C.scala 491:38]
    _T_493.write <= _T_499 @[I2C.scala 491:38]
    node _T_500 = bits(_T_495, 5, 5) @[I2C.scala 491:38]
    _T_493.read <= _T_500 @[I2C.scala 491:38]
    node _T_501 = bits(_T_495, 6, 6) @[I2C.scala 491:38]
    _T_493.stop <= _T_501 @[I2C.scala 491:38]
    node _T_502 = bits(_T_495, 7, 7) @[I2C.scala 491:38]
    _T_493.start <= _T_502 @[I2C.scala 491:38]
    cmd <- _T_493 @[I2C.scala 491:7]
    node _T_503 = cat(cmd.ack, cmd.reserved) @[I2C.scala 492:18]
    node _T_504 = cat(_T_503, cmd.irqAck) @[I2C.scala 492:18]
    node _T_505 = cat(cmd.read, cmd.write) @[I2C.scala 492:18]
    node _T_506 = cat(cmd.start, cmd.stop) @[I2C.scala 492:18]
    node _T_507 = cat(_T_506, _T_505) @[I2C.scala 492:18]
    node _T_508 = cat(_T_507, _T_504) @[I2C.scala 492:18]
    node _T_510 = and(_T_508, UInt<8>("h0fe")) @[I2C.scala 492:25]
    nextCmd <= _T_510 @[I2C.scala 492:11]
    node _T_511 = or(cmdAck, arbLost) @[I2C.scala 495:16]
    when _T_511 : @[I2C.scala 495:28]
      cmd.start <= UInt<1>("h00") @[I2C.scala 496:15]
      cmd.stop <= UInt<1>("h00") @[I2C.scala 497:15]
      cmd.read <= UInt<1>("h00") @[I2C.scala 498:15]
      cmd.write <= UInt<1>("h00") @[I2C.scala 499:15]
      skip @[I2C.scala 495:28]
    status.receivedAck <= receivedAck @[I2C.scala 502:22]
    when stopCond : @[I2C.scala 503:19]
      status.busy <= UInt<1>("h00") @[I2C.scala 504:29]
      skip @[I2C.scala 503:19]
    else : @[I2C.scala 506:25]
      when startCond : @[I2C.scala 506:25]
        status.busy <= UInt<1>("h01") @[I2C.scala 507:29]
        skip @[I2C.scala 506:25]
    when arbLost : @[I2C.scala 510:18]
      status.arbLost <= UInt<1>("h01") @[I2C.scala 511:29]
      skip @[I2C.scala 510:18]
    else : @[I2C.scala 513:25]
      when cmd.start : @[I2C.scala 513:25]
        status.arbLost <= UInt<1>("h00") @[I2C.scala 514:29]
        skip @[I2C.scala 513:25]
    node _T_520 = or(cmd.read, cmd.write) @[I2C.scala 516:41]
    status.transferInProgress <= _T_520 @[I2C.scala 516:29]
    node _T_521 = or(cmdAck, arbLost) @[I2C.scala 517:40]
    node _T_522 = or(_T_521, status.irqFlag) @[I2C.scala 517:51]
    node _T_524 = eq(cmd.irqAck, UInt<1>("h00")) @[I2C.scala 517:73]
    node _T_525 = and(_T_522, _T_524) @[I2C.scala 517:70]
    status.irqFlag <= _T_525 @[I2C.scala 517:29]
    reg statusReadReady : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C.scala 520:28]
    node _T_528 = or(cmdAck, arbLost) @[I2C.scala 521:16]
    when _T_528 : @[I2C.scala 521:28]
      statusReadReady <= UInt<1>("h00") @[I2C.scala 522:21]
      skip @[I2C.scala 521:28]
    else : @[I2C.scala 524:32]
      node _T_531 = eq(statusReadReady, UInt<1>("h00")) @[I2C.scala 524:14]
      when _T_531 : @[I2C.scala 524:32]
        statusReadReady <= UInt<1>("h01") @[I2C.scala 525:21]
        skip @[I2C.scala 524:32]
    wire _T_537 : {flip ready : UInt<1>, valid : UInt<1>, bits : {read : UInt<1>, index : UInt<10>, data : UInt<32>, mask : UInt<4>, extra : UInt<9>}} @[RegisterRouter.scala 54:18]
    _T_537 is invalid @[RegisterRouter.scala 54:18]
    node _T_541 = eq(_T_26.a.bits.opcode, UInt<3>("h04")) @[RegisterRouter.scala 55:36]
    _T_537.bits.read <= _T_541 @[RegisterRouter.scala 55:19]
    node _T_542 = shr(_T_26.a.bits.address, 2) @[Edges.scala 183:34]
    _T_537.bits.index <= _T_542 @[RegisterRouter.scala 56:19]
    _T_537.bits.data <= _T_26.a.bits.data @[RegisterRouter.scala 57:19]
    _T_537.bits.mask <= _T_26.a.bits.mask @[RegisterRouter.scala 58:19]
    node _T_543 = cat(_T_26.a.bits.source, _T_26.a.bits.size) @[Cat.scala 30:58]
    _T_537.bits.extra <= _T_543 @[RegisterRouter.scala 59:19]
    wire _T_548 : {flip ready : UInt<1>, valid : UInt<1>, bits : {read : UInt<1>, data : UInt<32>, extra : UInt<9>}} @[RegisterRouter.scala 62:24]
    _T_548 is invalid @[RegisterRouter.scala 62:24]
    wire _T_555 : {flip ready : UInt<1>, valid : UInt<1>, bits : {read : UInt<1>, index : UInt<10>, data : UInt<32>, mask : UInt<4>, extra : UInt<9>}} @[RegisterRouter.scala 62:24]
    _T_555 is invalid @[RegisterRouter.scala 62:24]
    _T_555.bits <- _T_537.bits @[RegisterRouter.scala 62:24]
    node _T_559 = not(UInt<10>("h07")) @[RegisterRouter.scala 62:24]
    node _T_577 = xor(_T_555.bits.index, UInt<10>("h00")) @[RegisterRouter.scala 62:24]
    node _T_578 = and(_T_577, _T_559) @[RegisterRouter.scala 62:24]
    node _T_580 = eq(_T_578, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_581 = xor(_T_555.bits.index, UInt<10>("h00")) @[RegisterRouter.scala 62:24]
    node _T_582 = and(_T_581, _T_559) @[RegisterRouter.scala 62:24]
    node _T_584 = eq(_T_582, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_586 = xor(_T_555.bits.index, UInt<10>("h01")) @[RegisterRouter.scala 62:24]
    node _T_587 = and(_T_586, _T_559) @[RegisterRouter.scala 62:24]
    node _T_589 = eq(_T_587, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_590 = xor(_T_555.bits.index, UInt<10>("h01")) @[RegisterRouter.scala 62:24]
    node _T_591 = and(_T_590, _T_559) @[RegisterRouter.scala 62:24]
    node _T_593 = eq(_T_591, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_595 = xor(_T_555.bits.index, UInt<10>("h02")) @[RegisterRouter.scala 62:24]
    node _T_596 = and(_T_595, _T_559) @[RegisterRouter.scala 62:24]
    node _T_598 = eq(_T_596, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_599 = xor(_T_555.bits.index, UInt<10>("h02")) @[RegisterRouter.scala 62:24]
    node _T_600 = and(_T_599, _T_559) @[RegisterRouter.scala 62:24]
    node _T_602 = eq(_T_600, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_604 = xor(_T_555.bits.index, UInt<10>("h03")) @[RegisterRouter.scala 62:24]
    node _T_605 = and(_T_604, _T_559) @[RegisterRouter.scala 62:24]
    node _T_607 = eq(_T_605, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_608 = xor(_T_555.bits.index, UInt<10>("h03")) @[RegisterRouter.scala 62:24]
    node _T_609 = and(_T_608, _T_559) @[RegisterRouter.scala 62:24]
    node _T_611 = eq(_T_609, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_613 = xor(_T_555.bits.index, UInt<10>("h04")) @[RegisterRouter.scala 62:24]
    node _T_614 = and(_T_613, _T_559) @[RegisterRouter.scala 62:24]
    node _T_616 = eq(_T_614, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_617 = xor(_T_555.bits.index, UInt<10>("h04")) @[RegisterRouter.scala 62:24]
    node _T_618 = and(_T_617, _T_559) @[RegisterRouter.scala 62:24]
    node _T_620 = eq(_T_618, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    wire _T_624 : UInt<1>[7] @[RegisterRouter.scala 62:24]
    _T_624 is invalid @[RegisterRouter.scala 62:24]
    wire _T_637 : UInt<1>[7] @[RegisterRouter.scala 62:24]
    _T_637 is invalid @[RegisterRouter.scala 62:24]
    wire _T_650 : UInt<1>[7] @[RegisterRouter.scala 62:24]
    _T_650 is invalid @[RegisterRouter.scala 62:24]
    wire _T_663 : UInt<1>[7] @[RegisterRouter.scala 62:24]
    _T_663 is invalid @[RegisterRouter.scala 62:24]
    node _T_681 = bits(_T_555.bits.mask, 0, 0) @[Bitwise.scala 27:51]
    node _T_682 = bits(_T_555.bits.mask, 1, 1) @[Bitwise.scala 27:51]
    node _T_683 = bits(_T_555.bits.mask, 2, 2) @[Bitwise.scala 27:51]
    node _T_684 = bits(_T_555.bits.mask, 3, 3) @[Bitwise.scala 27:51]
    node _T_685 = bits(_T_681, 0, 0) @[Bitwise.scala 72:15]
    node _T_688 = mux(_T_685, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_689 = bits(_T_682, 0, 0) @[Bitwise.scala 72:15]
    node _T_692 = mux(_T_689, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_693 = bits(_T_683, 0, 0) @[Bitwise.scala 72:15]
    node _T_696 = mux(_T_693, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_697 = bits(_T_684, 0, 0) @[Bitwise.scala 72:15]
    node _T_700 = mux(_T_697, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_701 = cat(_T_692, _T_688) @[Cat.scala 30:58]
    node _T_702 = cat(_T_700, _T_696) @[Cat.scala 30:58]
    node _T_703 = cat(_T_702, _T_701) @[Cat.scala 30:58]
    node _T_704 = bits(_T_555.bits.mask, 0, 0) @[Bitwise.scala 27:51]
    node _T_705 = bits(_T_555.bits.mask, 1, 1) @[Bitwise.scala 27:51]
    node _T_706 = bits(_T_555.bits.mask, 2, 2) @[Bitwise.scala 27:51]
    node _T_707 = bits(_T_555.bits.mask, 3, 3) @[Bitwise.scala 27:51]
    node _T_708 = bits(_T_704, 0, 0) @[Bitwise.scala 72:15]
    node _T_711 = mux(_T_708, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_712 = bits(_T_705, 0, 0) @[Bitwise.scala 72:15]
    node _T_715 = mux(_T_712, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_716 = bits(_T_706, 0, 0) @[Bitwise.scala 72:15]
    node _T_719 = mux(_T_716, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_720 = bits(_T_707, 0, 0) @[Bitwise.scala 72:15]
    node _T_723 = mux(_T_720, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_724 = cat(_T_715, _T_711) @[Cat.scala 30:58]
    node _T_725 = cat(_T_723, _T_719) @[Cat.scala 30:58]
    node _T_726 = cat(_T_725, _T_724) @[Cat.scala 30:58]
    node _T_727 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_729 = neq(_T_727, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_730 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_731 = not(_T_730) @[RegisterRouter.scala 62:24]
    node _T_733 = eq(_T_731, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_734 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_736 = neq(_T_734, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_737 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_738 = not(_T_737) @[RegisterRouter.scala 62:24]
    node _T_740 = eq(_T_738, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_741 = and(_T_624[0], _T_729) @[RegisterRouter.scala 62:24]
    node _T_742 = and(_T_650[0], _T_736) @[RegisterRouter.scala 62:24]
    node _T_743 = and(_T_637[0], _T_733) @[RegisterRouter.scala 62:24]
    node _T_744 = and(_T_663[0], _T_740) @[RegisterRouter.scala 62:24]
    node _T_747 = bits(_T_555.bits.data, 7, 0) @[RegisterRouter.scala 62:24]
    when _T_744 : @[RegField.scala 135:88]
      prescaler.lo <= _T_747 @[RegField.scala 135:92]
      skip @[RegField.scala 135:88]
    node _T_750 = and(_T_741, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_751 = and(UInt<1>("h01"), _T_742) @[RegisterRouter.scala 62:24]
    node _T_752 = and(_T_743, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_753 = and(UInt<1>("h01"), _T_744) @[RegisterRouter.scala 62:24]
    node _T_755 = eq(_T_729, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_758 = eq(_T_733, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_761 = eq(_T_736, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_764 = eq(_T_740, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_766 = shl(prescaler.lo, 0) @[RegisterRouter.scala 62:24]
    node _T_768 = not(UInt<8>("h00")) @[RegisterRouter.scala 62:24]
    node _T_769 = and(_T_766, _T_768) @[RegisterRouter.scala 62:24]
    node _T_770 = or(UInt<1>("h00"), _T_769) @[RegisterRouter.scala 62:24]
    node _T_771 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_773 = neq(_T_771, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_774 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_775 = not(_T_774) @[RegisterRouter.scala 62:24]
    node _T_777 = eq(_T_775, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_778 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_780 = neq(_T_778, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_781 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_782 = not(_T_781) @[RegisterRouter.scala 62:24]
    node _T_784 = eq(_T_782, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_785 = and(_T_624[1], _T_773) @[RegisterRouter.scala 62:24]
    node _T_786 = and(_T_650[1], _T_780) @[RegisterRouter.scala 62:24]
    node _T_787 = and(_T_637[1], _T_777) @[RegisterRouter.scala 62:24]
    node _T_788 = and(_T_663[1], _T_784) @[RegisterRouter.scala 62:24]
    node _T_791 = bits(_T_555.bits.data, 7, 0) @[RegisterRouter.scala 62:24]
    when _T_788 : @[RegField.scala 135:88]
      prescaler.hi <= _T_791 @[RegField.scala 135:92]
      skip @[RegField.scala 135:88]
    node _T_794 = and(_T_785, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_795 = and(UInt<1>("h01"), _T_786) @[RegisterRouter.scala 62:24]
    node _T_796 = and(_T_787, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_797 = and(UInt<1>("h01"), _T_788) @[RegisterRouter.scala 62:24]
    node _T_799 = eq(_T_773, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_802 = eq(_T_777, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_805 = eq(_T_780, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_808 = eq(_T_784, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_810 = shl(prescaler.hi, 0) @[RegisterRouter.scala 62:24]
    node _T_812 = not(UInt<8>("h00")) @[RegisterRouter.scala 62:24]
    node _T_813 = and(_T_810, _T_812) @[RegisterRouter.scala 62:24]
    node _T_814 = or(UInt<1>("h00"), _T_813) @[RegisterRouter.scala 62:24]
    node _T_815 = bits(_T_703, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_817 = neq(_T_815, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_818 = bits(_T_703, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_819 = not(_T_818) @[RegisterRouter.scala 62:24]
    node _T_821 = eq(_T_819, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_822 = bits(_T_726, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_824 = neq(_T_822, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_825 = bits(_T_726, 5, 0) @[RegisterRouter.scala 62:24]
    node _T_826 = not(_T_825) @[RegisterRouter.scala 62:24]
    node _T_828 = eq(_T_826, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_829 = and(_T_624[2], _T_817) @[RegisterRouter.scala 62:24]
    node _T_830 = and(_T_650[2], _T_824) @[RegisterRouter.scala 62:24]
    node _T_831 = and(_T_637[2], _T_821) @[RegisterRouter.scala 62:24]
    node _T_832 = and(_T_663[2], _T_828) @[RegisterRouter.scala 62:24]
    node _T_835 = bits(_T_555.bits.data, 5, 0) @[RegisterRouter.scala 62:24]
    when _T_832 : @[RegField.scala 135:88]
      control.reserved <= _T_835 @[RegField.scala 135:92]
      skip @[RegField.scala 135:88]
    node _T_838 = and(_T_829, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_839 = and(UInt<1>("h01"), _T_830) @[RegisterRouter.scala 62:24]
    node _T_840 = and(_T_831, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_841 = and(UInt<1>("h01"), _T_832) @[RegisterRouter.scala 62:24]
    node _T_843 = eq(_T_817, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_846 = eq(_T_821, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_849 = eq(_T_824, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_852 = eq(_T_828, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_854 = shl(control.reserved, 0) @[RegisterRouter.scala 62:24]
    node _T_856 = not(UInt<6>("h00")) @[RegisterRouter.scala 62:24]
    node _T_857 = and(_T_854, _T_856) @[RegisterRouter.scala 62:24]
    node _T_858 = or(UInt<1>("h00"), _T_857) @[RegisterRouter.scala 62:24]
    node _T_859 = bits(_T_703, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_861 = neq(_T_859, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_862 = bits(_T_703, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_863 = not(_T_862) @[RegisterRouter.scala 62:24]
    node _T_865 = eq(_T_863, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_866 = bits(_T_726, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_868 = neq(_T_866, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_869 = bits(_T_726, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_870 = not(_T_869) @[RegisterRouter.scala 62:24]
    node _T_872 = eq(_T_870, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_873 = and(_T_624[3], _T_861) @[RegisterRouter.scala 62:24]
    node _T_874 = and(_T_650[3], _T_868) @[RegisterRouter.scala 62:24]
    node _T_875 = and(_T_637[3], _T_865) @[RegisterRouter.scala 62:24]
    node _T_876 = and(_T_663[3], _T_872) @[RegisterRouter.scala 62:24]
    node _T_879 = bits(_T_555.bits.data, 6, 6) @[RegisterRouter.scala 62:24]
    when _T_876 : @[RegField.scala 135:88]
      control.intEn <= _T_879 @[RegField.scala 135:92]
      skip @[RegField.scala 135:88]
    node _T_882 = and(_T_873, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_883 = and(UInt<1>("h01"), _T_874) @[RegisterRouter.scala 62:24]
    node _T_884 = and(_T_875, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_885 = and(UInt<1>("h01"), _T_876) @[RegisterRouter.scala 62:24]
    node _T_887 = eq(_T_861, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_890 = eq(_T_865, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_893 = eq(_T_868, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_896 = eq(_T_872, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_898 = shl(control.intEn, 6) @[RegisterRouter.scala 62:24]
    node _T_900 = not(UInt<7>("h00")) @[RegisterRouter.scala 62:24]
    node _T_901 = and(_T_898, _T_900) @[RegisterRouter.scala 62:24]
    node _T_902 = or(_T_858, _T_901) @[RegisterRouter.scala 62:24]
    node _T_903 = bits(_T_703, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_905 = neq(_T_903, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_906 = bits(_T_703, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_907 = not(_T_906) @[RegisterRouter.scala 62:24]
    node _T_909 = eq(_T_907, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_910 = bits(_T_726, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_912 = neq(_T_910, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_913 = bits(_T_726, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_914 = not(_T_913) @[RegisterRouter.scala 62:24]
    node _T_916 = eq(_T_914, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_917 = and(_T_624[4], _T_905) @[RegisterRouter.scala 62:24]
    node _T_918 = and(_T_650[4], _T_912) @[RegisterRouter.scala 62:24]
    node _T_919 = and(_T_637[4], _T_909) @[RegisterRouter.scala 62:24]
    node _T_920 = and(_T_663[4], _T_916) @[RegisterRouter.scala 62:24]
    node _T_923 = bits(_T_555.bits.data, 7, 7) @[RegisterRouter.scala 62:24]
    when _T_920 : @[RegField.scala 135:88]
      control.coreEn <= _T_923 @[RegField.scala 135:92]
      skip @[RegField.scala 135:88]
    node _T_926 = and(_T_917, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_927 = and(UInt<1>("h01"), _T_918) @[RegisterRouter.scala 62:24]
    node _T_928 = and(_T_919, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_929 = and(UInt<1>("h01"), _T_920) @[RegisterRouter.scala 62:24]
    node _T_931 = eq(_T_905, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_934 = eq(_T_909, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_937 = eq(_T_912, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_940 = eq(_T_916, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_942 = shl(control.coreEn, 7) @[RegisterRouter.scala 62:24]
    node _T_944 = not(UInt<8>("h00")) @[RegisterRouter.scala 62:24]
    node _T_945 = and(_T_942, _T_944) @[RegisterRouter.scala 62:24]
    node _T_946 = or(_T_902, _T_945) @[RegisterRouter.scala 62:24]
    node _T_947 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_949 = neq(_T_947, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_950 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_951 = not(_T_950) @[RegisterRouter.scala 62:24]
    node _T_953 = eq(_T_951, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_954 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_956 = neq(_T_954, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_957 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_958 = not(_T_957) @[RegisterRouter.scala 62:24]
    node _T_960 = eq(_T_958, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_961 = and(_T_624[5], _T_949) @[RegisterRouter.scala 62:24]
    node _T_962 = and(_T_650[5], _T_956) @[RegisterRouter.scala 62:24]
    node _T_963 = and(_T_637[5], _T_953) @[RegisterRouter.scala 62:24]
    node _T_964 = and(_T_663[5], _T_960) @[RegisterRouter.scala 62:24]
    node _T_967 = bits(_T_555.bits.data, 7, 0) @[RegisterRouter.scala 62:24]
    when _T_964 : @[RegField.scala 135:88]
      transmitData <= _T_967 @[RegField.scala 135:92]
      skip @[RegField.scala 135:88]
    node _T_970 = and(_T_961, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_971 = and(UInt<1>("h01"), _T_962) @[RegisterRouter.scala 62:24]
    node _T_972 = and(_T_963, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_973 = and(UInt<1>("h01"), _T_964) @[RegisterRouter.scala 62:24]
    node _T_975 = eq(_T_949, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_978 = eq(_T_953, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_981 = eq(_T_956, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_984 = eq(_T_960, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_986 = shl(receivedData, 0) @[RegisterRouter.scala 62:24]
    node _T_988 = not(UInt<8>("h00")) @[RegisterRouter.scala 62:24]
    node _T_989 = and(_T_986, _T_988) @[RegisterRouter.scala 62:24]
    node _T_990 = or(UInt<1>("h00"), _T_989) @[RegisterRouter.scala 62:24]
    node _T_991 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_993 = neq(_T_991, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_994 = bits(_T_703, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_995 = not(_T_994) @[RegisterRouter.scala 62:24]
    node _T_997 = eq(_T_995, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_998 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_1000 = neq(_T_998, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1001 = bits(_T_726, 7, 0) @[RegisterRouter.scala 62:24]
    node _T_1002 = not(_T_1001) @[RegisterRouter.scala 62:24]
    node _T_1004 = eq(_T_1002, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1005 = and(_T_624[6], _T_993) @[RegisterRouter.scala 62:24]
    node _T_1006 = and(_T_650[6], _T_1000) @[RegisterRouter.scala 62:24]
    node _T_1007 = and(_T_637[6], _T_997) @[RegisterRouter.scala 62:24]
    node _T_1008 = and(_T_663[6], _T_1004) @[RegisterRouter.scala 62:24]
    node _T_1009 = cat(status.reserved, status.transferInProgress) @[I2C.scala 535:89]
    node _T_1010 = cat(_T_1009, status.irqFlag) @[I2C.scala 535:89]
    node _T_1011 = cat(status.receivedAck, status.busy) @[I2C.scala 535:89]
    node _T_1012 = cat(_T_1011, status.arbLost) @[I2C.scala 535:89]
    node _T_1013 = cat(_T_1012, _T_1010) @[I2C.scala 535:89]
    node _T_1015 = bits(_T_555.bits.data, 7, 0) @[RegisterRouter.scala 62:24]
    when _T_1008 : @[I2C.scala 538:77]
      statusReadReady <= UInt<1>("h00") @[I2C.scala 539:82]
      nextCmd <= _T_1015 @[I2C.scala 540:74]
      skip @[I2C.scala 538:77]
    node _T_1019 = and(_T_1005, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_1020 = and(statusReadReady, _T_1006) @[RegisterRouter.scala 62:24]
    node _T_1021 = and(_T_1007, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    node _T_1022 = and(UInt<1>("h01"), _T_1008) @[RegisterRouter.scala 62:24]
    node _T_1024 = eq(_T_993, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1027 = eq(_T_997, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1030 = eq(_T_1000, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1031 = or(statusReadReady, _T_1030) @[RegisterRouter.scala 62:24]
    node _T_1033 = eq(_T_1004, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1035 = shl(_T_1013, 0) @[RegisterRouter.scala 62:24]
    node _T_1037 = not(UInt<8>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1038 = and(_T_1035, _T_1037) @[RegisterRouter.scala 62:24]
    node _T_1039 = or(UInt<1>("h00"), _T_1038) @[RegisterRouter.scala 62:24]
    node _T_1040 = bits(_T_555.bits.index, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1041 = bits(_T_555.bits.index, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1042 = bits(_T_555.bits.index, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1043 = bits(_T_555.bits.index, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1044 = bits(_T_555.bits.index, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1045 = bits(_T_555.bits.index, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1046 = bits(_T_555.bits.index, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1047 = bits(_T_555.bits.index, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1048 = bits(_T_555.bits.index, 8, 8) @[RegisterRouter.scala 62:24]
    node _T_1049 = bits(_T_555.bits.index, 9, 9) @[RegisterRouter.scala 62:24]
    node _T_1050 = cat(_T_1042, _T_1041) @[Cat.scala 30:58]
    node _T_1051 = cat(_T_1050, _T_1040) @[Cat.scala 30:58]
    node _T_1052 = bits(_T_555.bits.index, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1053 = bits(_T_555.bits.index, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1054 = bits(_T_555.bits.index, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1055 = bits(_T_555.bits.index, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1056 = bits(_T_555.bits.index, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1057 = bits(_T_555.bits.index, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1058 = bits(_T_555.bits.index, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1059 = bits(_T_555.bits.index, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1060 = bits(_T_555.bits.index, 8, 8) @[RegisterRouter.scala 62:24]
    node _T_1061 = bits(_T_555.bits.index, 9, 9) @[RegisterRouter.scala 62:24]
    node _T_1062 = cat(_T_1054, _T_1053) @[Cat.scala 30:58]
    node _T_1063 = cat(_T_1062, _T_1052) @[Cat.scala 30:58]
    node _T_1065 = dshl(UInt<1>("h01"), _T_1051) @[OneHot.scala 45:35]
    node _T_1066 = bits(_T_1065, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1067 = bits(_T_1065, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1068 = bits(_T_1065, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1069 = bits(_T_1065, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1070 = bits(_T_1065, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1071 = bits(_T_1065, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1072 = bits(_T_1065, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1073 = bits(_T_1065, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1075 = dshl(UInt<1>("h01"), _T_1063) @[OneHot.scala 45:35]
    node _T_1076 = bits(_T_1075, 0, 0) @[RegisterRouter.scala 62:24]
    node _T_1077 = bits(_T_1075, 1, 1) @[RegisterRouter.scala 62:24]
    node _T_1078 = bits(_T_1075, 2, 2) @[RegisterRouter.scala 62:24]
    node _T_1079 = bits(_T_1075, 3, 3) @[RegisterRouter.scala 62:24]
    node _T_1080 = bits(_T_1075, 4, 4) @[RegisterRouter.scala 62:24]
    node _T_1081 = bits(_T_1075, 5, 5) @[RegisterRouter.scala 62:24]
    node _T_1082 = bits(_T_1075, 6, 6) @[RegisterRouter.scala 62:24]
    node _T_1083 = bits(_T_1075, 7, 7) @[RegisterRouter.scala 62:24]
    node _T_1084 = and(_T_537.valid, _T_555.ready) @[RegisterRouter.scala 62:24]
    node _T_1085 = and(_T_1084, _T_555.bits.read) @[RegisterRouter.scala 62:24]
    wire _T_1087 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1087 is invalid @[RegisterRouter.scala 62:24]
    node _T_1088 = and(_T_1085, _T_1066) @[RegisterRouter.scala 62:24]
    node _T_1089 = and(_T_1088, _T_580) @[RegisterRouter.scala 62:24]
    _T_1087 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_624[0] <= _T_1089 @[ReduceOthers.scala 39:69]
    node _T_1092 = eq(_T_580, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1093 = or(_T_1087, _T_1092) @[RegisterRouter.scala 62:24]
    wire _T_1095 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1095 is invalid @[RegisterRouter.scala 62:24]
    node _T_1096 = and(_T_1085, _T_1067) @[RegisterRouter.scala 62:24]
    node _T_1097 = and(_T_1096, _T_589) @[RegisterRouter.scala 62:24]
    _T_1095 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_624[1] <= _T_1097 @[ReduceOthers.scala 39:69]
    node _T_1100 = eq(_T_589, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1101 = or(_T_1095, _T_1100) @[RegisterRouter.scala 62:24]
    wire _T_1103 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1103 is invalid @[RegisterRouter.scala 62:24]
    node _T_1104 = and(_T_1085, _T_1068) @[RegisterRouter.scala 62:24]
    node _T_1105 = and(_T_1104, _T_598) @[RegisterRouter.scala 62:24]
    _T_1103 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_624[4] <= _T_1105 @[ReduceOthers.scala 39:69]
    _T_624[3] <= _T_1105 @[ReduceOthers.scala 39:69]
    _T_624[2] <= _T_1105 @[ReduceOthers.scala 39:69]
    node _T_1108 = eq(_T_598, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1109 = or(_T_1103, _T_1108) @[RegisterRouter.scala 62:24]
    wire _T_1111 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1111 is invalid @[RegisterRouter.scala 62:24]
    node _T_1112 = and(_T_1085, _T_1069) @[RegisterRouter.scala 62:24]
    node _T_1113 = and(_T_1112, _T_607) @[RegisterRouter.scala 62:24]
    _T_1111 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_624[5] <= _T_1113 @[ReduceOthers.scala 39:69]
    node _T_1116 = eq(_T_607, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1117 = or(_T_1111, _T_1116) @[RegisterRouter.scala 62:24]
    wire _T_1119 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1119 is invalid @[RegisterRouter.scala 62:24]
    node _T_1120 = and(_T_1085, _T_1070) @[RegisterRouter.scala 62:24]
    node _T_1121 = and(_T_1120, _T_616) @[RegisterRouter.scala 62:24]
    _T_1119 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_624[6] <= _T_1121 @[ReduceOthers.scala 39:69]
    node _T_1124 = eq(_T_616, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1125 = or(_T_1119, _T_1124) @[RegisterRouter.scala 62:24]
    wire _T_1127 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1127 is invalid @[RegisterRouter.scala 62:24]
    node _T_1128 = and(_T_1085, _T_1071) @[RegisterRouter.scala 62:24]
    node _T_1129 = and(_T_1128, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1127 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1132 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1133 = or(_T_1127, _T_1132) @[RegisterRouter.scala 62:24]
    wire _T_1135 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1135 is invalid @[RegisterRouter.scala 62:24]
    node _T_1136 = and(_T_1085, _T_1072) @[RegisterRouter.scala 62:24]
    node _T_1137 = and(_T_1136, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1135 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1140 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1141 = or(_T_1135, _T_1140) @[RegisterRouter.scala 62:24]
    wire _T_1143 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1143 is invalid @[RegisterRouter.scala 62:24]
    node _T_1144 = and(_T_1085, _T_1073) @[RegisterRouter.scala 62:24]
    node _T_1145 = and(_T_1144, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1143 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1148 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1149 = or(_T_1143, _T_1148) @[RegisterRouter.scala 62:24]
    wire _T_1152 : UInt<1>[8] @[RegisterRouter.scala 62:24]
    _T_1152 is invalid @[RegisterRouter.scala 62:24]
    _T_1152[0] <= _T_1093 @[RegisterRouter.scala 62:24]
    _T_1152[1] <= _T_1101 @[RegisterRouter.scala 62:24]
    _T_1152[2] <= _T_1109 @[RegisterRouter.scala 62:24]
    _T_1152[3] <= _T_1117 @[RegisterRouter.scala 62:24]
    _T_1152[4] <= _T_1125 @[RegisterRouter.scala 62:24]
    _T_1152[5] <= _T_1133 @[RegisterRouter.scala 62:24]
    _T_1152[6] <= _T_1141 @[RegisterRouter.scala 62:24]
    _T_1152[7] <= _T_1149 @[RegisterRouter.scala 62:24]
    node _T_1163 = and(_T_537.valid, _T_555.ready) @[RegisterRouter.scala 62:24]
    node _T_1165 = eq(_T_555.bits.read, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1166 = and(_T_1163, _T_1165) @[RegisterRouter.scala 62:24]
    wire _T_1168 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1168 is invalid @[RegisterRouter.scala 62:24]
    node _T_1169 = and(_T_1166, _T_1066) @[RegisterRouter.scala 62:24]
    node _T_1170 = and(_T_1169, _T_580) @[RegisterRouter.scala 62:24]
    _T_1168 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_637[0] <= _T_1170 @[ReduceOthers.scala 39:69]
    node _T_1173 = eq(_T_580, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1174 = or(_T_1168, _T_1173) @[RegisterRouter.scala 62:24]
    wire _T_1176 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1176 is invalid @[RegisterRouter.scala 62:24]
    node _T_1177 = and(_T_1166, _T_1067) @[RegisterRouter.scala 62:24]
    node _T_1178 = and(_T_1177, _T_589) @[RegisterRouter.scala 62:24]
    _T_1176 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_637[1] <= _T_1178 @[ReduceOthers.scala 39:69]
    node _T_1181 = eq(_T_589, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1182 = or(_T_1176, _T_1181) @[RegisterRouter.scala 62:24]
    wire _T_1184 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1184 is invalid @[RegisterRouter.scala 62:24]
    node _T_1185 = and(_T_1166, _T_1068) @[RegisterRouter.scala 62:24]
    node _T_1186 = and(_T_1185, _T_598) @[RegisterRouter.scala 62:24]
    _T_1184 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_637[4] <= _T_1186 @[ReduceOthers.scala 39:69]
    _T_637[3] <= _T_1186 @[ReduceOthers.scala 39:69]
    _T_637[2] <= _T_1186 @[ReduceOthers.scala 39:69]
    node _T_1189 = eq(_T_598, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1190 = or(_T_1184, _T_1189) @[RegisterRouter.scala 62:24]
    wire _T_1192 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1192 is invalid @[RegisterRouter.scala 62:24]
    node _T_1193 = and(_T_1166, _T_1069) @[RegisterRouter.scala 62:24]
    node _T_1194 = and(_T_1193, _T_607) @[RegisterRouter.scala 62:24]
    _T_1192 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_637[5] <= _T_1194 @[ReduceOthers.scala 39:69]
    node _T_1197 = eq(_T_607, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1198 = or(_T_1192, _T_1197) @[RegisterRouter.scala 62:24]
    wire _T_1200 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1200 is invalid @[RegisterRouter.scala 62:24]
    node _T_1201 = and(_T_1166, _T_1070) @[RegisterRouter.scala 62:24]
    node _T_1202 = and(_T_1201, _T_616) @[RegisterRouter.scala 62:24]
    _T_1200 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_637[6] <= _T_1202 @[ReduceOthers.scala 39:69]
    node _T_1205 = eq(_T_616, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1206 = or(_T_1200, _T_1205) @[RegisterRouter.scala 62:24]
    wire _T_1208 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1208 is invalid @[RegisterRouter.scala 62:24]
    node _T_1209 = and(_T_1166, _T_1071) @[RegisterRouter.scala 62:24]
    node _T_1210 = and(_T_1209, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1208 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1213 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1214 = or(_T_1208, _T_1213) @[RegisterRouter.scala 62:24]
    wire _T_1216 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1216 is invalid @[RegisterRouter.scala 62:24]
    node _T_1217 = and(_T_1166, _T_1072) @[RegisterRouter.scala 62:24]
    node _T_1218 = and(_T_1217, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1216 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1221 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1222 = or(_T_1216, _T_1221) @[RegisterRouter.scala 62:24]
    wire _T_1224 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1224 is invalid @[RegisterRouter.scala 62:24]
    node _T_1225 = and(_T_1166, _T_1073) @[RegisterRouter.scala 62:24]
    node _T_1226 = and(_T_1225, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1224 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1229 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1230 = or(_T_1224, _T_1229) @[RegisterRouter.scala 62:24]
    wire _T_1233 : UInt<1>[8] @[RegisterRouter.scala 62:24]
    _T_1233 is invalid @[RegisterRouter.scala 62:24]
    _T_1233[0] <= _T_1174 @[RegisterRouter.scala 62:24]
    _T_1233[1] <= _T_1182 @[RegisterRouter.scala 62:24]
    _T_1233[2] <= _T_1190 @[RegisterRouter.scala 62:24]
    _T_1233[3] <= _T_1198 @[RegisterRouter.scala 62:24]
    _T_1233[4] <= _T_1206 @[RegisterRouter.scala 62:24]
    _T_1233[5] <= _T_1214 @[RegisterRouter.scala 62:24]
    _T_1233[6] <= _T_1222 @[RegisterRouter.scala 62:24]
    _T_1233[7] <= _T_1230 @[RegisterRouter.scala 62:24]
    node _T_1244 = and(_T_555.valid, _T_548.ready) @[RegisterRouter.scala 62:24]
    node _T_1245 = and(_T_1244, _T_555.bits.read) @[RegisterRouter.scala 62:24]
    wire _T_1247 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1247 is invalid @[RegisterRouter.scala 62:24]
    node _T_1248 = and(_T_1245, _T_1076) @[RegisterRouter.scala 62:24]
    node _T_1249 = and(_T_1248, _T_584) @[RegisterRouter.scala 62:24]
    _T_1247 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_650[0] <= _T_1249 @[ReduceOthers.scala 39:69]
    node _T_1252 = eq(_T_584, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1253 = or(_T_1247, _T_1252) @[RegisterRouter.scala 62:24]
    wire _T_1255 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1255 is invalid @[RegisterRouter.scala 62:24]
    node _T_1256 = and(_T_1245, _T_1077) @[RegisterRouter.scala 62:24]
    node _T_1257 = and(_T_1256, _T_593) @[RegisterRouter.scala 62:24]
    _T_1255 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_650[1] <= _T_1257 @[ReduceOthers.scala 39:69]
    node _T_1260 = eq(_T_593, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1261 = or(_T_1255, _T_1260) @[RegisterRouter.scala 62:24]
    wire _T_1263 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1263 is invalid @[RegisterRouter.scala 62:24]
    node _T_1264 = and(_T_1245, _T_1078) @[RegisterRouter.scala 62:24]
    node _T_1265 = and(_T_1264, _T_602) @[RegisterRouter.scala 62:24]
    _T_1263 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_650[4] <= _T_1265 @[ReduceOthers.scala 39:69]
    _T_650[3] <= _T_1265 @[ReduceOthers.scala 39:69]
    _T_650[2] <= _T_1265 @[ReduceOthers.scala 39:69]
    node _T_1268 = eq(_T_602, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1269 = or(_T_1263, _T_1268) @[RegisterRouter.scala 62:24]
    wire _T_1271 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1271 is invalid @[RegisterRouter.scala 62:24]
    node _T_1272 = and(_T_1245, _T_1079) @[RegisterRouter.scala 62:24]
    node _T_1273 = and(_T_1272, _T_611) @[RegisterRouter.scala 62:24]
    _T_1271 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_650[5] <= _T_1273 @[ReduceOthers.scala 39:69]
    node _T_1276 = eq(_T_611, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1277 = or(_T_1271, _T_1276) @[RegisterRouter.scala 62:24]
    wire _T_1279 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1279 is invalid @[RegisterRouter.scala 62:24]
    node _T_1280 = and(_T_1245, _T_1080) @[RegisterRouter.scala 62:24]
    node _T_1281 = and(_T_1280, _T_620) @[RegisterRouter.scala 62:24]
    node _T_1282 = and(_T_1281, _T_1031) @[ReduceOthers.scala 47:21]
    _T_1279 <= _T_1031 @[ReduceOthers.scala 39:69]
    _T_650[6] <= _T_1281 @[ReduceOthers.scala 39:69]
    node _T_1284 = eq(_T_620, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1285 = or(_T_1279, _T_1284) @[RegisterRouter.scala 62:24]
    wire _T_1287 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1287 is invalid @[RegisterRouter.scala 62:24]
    node _T_1288 = and(_T_1245, _T_1081) @[RegisterRouter.scala 62:24]
    node _T_1289 = and(_T_1288, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1287 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1292 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1293 = or(_T_1287, _T_1292) @[RegisterRouter.scala 62:24]
    wire _T_1295 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1295 is invalid @[RegisterRouter.scala 62:24]
    node _T_1296 = and(_T_1245, _T_1082) @[RegisterRouter.scala 62:24]
    node _T_1297 = and(_T_1296, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1295 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1300 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1301 = or(_T_1295, _T_1300) @[RegisterRouter.scala 62:24]
    wire _T_1303 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1303 is invalid @[RegisterRouter.scala 62:24]
    node _T_1304 = and(_T_1245, _T_1083) @[RegisterRouter.scala 62:24]
    node _T_1305 = and(_T_1304, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1303 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1308 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1309 = or(_T_1303, _T_1308) @[RegisterRouter.scala 62:24]
    wire _T_1312 : UInt<1>[8] @[RegisterRouter.scala 62:24]
    _T_1312 is invalid @[RegisterRouter.scala 62:24]
    _T_1312[0] <= _T_1253 @[RegisterRouter.scala 62:24]
    _T_1312[1] <= _T_1261 @[RegisterRouter.scala 62:24]
    _T_1312[2] <= _T_1269 @[RegisterRouter.scala 62:24]
    _T_1312[3] <= _T_1277 @[RegisterRouter.scala 62:24]
    _T_1312[4] <= _T_1285 @[RegisterRouter.scala 62:24]
    _T_1312[5] <= _T_1293 @[RegisterRouter.scala 62:24]
    _T_1312[6] <= _T_1301 @[RegisterRouter.scala 62:24]
    _T_1312[7] <= _T_1309 @[RegisterRouter.scala 62:24]
    node _T_1323 = and(_T_555.valid, _T_548.ready) @[RegisterRouter.scala 62:24]
    node _T_1325 = eq(_T_555.bits.read, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1326 = and(_T_1323, _T_1325) @[RegisterRouter.scala 62:24]
    wire _T_1328 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1328 is invalid @[RegisterRouter.scala 62:24]
    node _T_1329 = and(_T_1326, _T_1076) @[RegisterRouter.scala 62:24]
    node _T_1330 = and(_T_1329, _T_584) @[RegisterRouter.scala 62:24]
    _T_1328 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_663[0] <= _T_1330 @[ReduceOthers.scala 39:69]
    node _T_1333 = eq(_T_584, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1334 = or(_T_1328, _T_1333) @[RegisterRouter.scala 62:24]
    wire _T_1336 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1336 is invalid @[RegisterRouter.scala 62:24]
    node _T_1337 = and(_T_1326, _T_1077) @[RegisterRouter.scala 62:24]
    node _T_1338 = and(_T_1337, _T_593) @[RegisterRouter.scala 62:24]
    _T_1336 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_663[1] <= _T_1338 @[ReduceOthers.scala 39:69]
    node _T_1341 = eq(_T_593, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1342 = or(_T_1336, _T_1341) @[RegisterRouter.scala 62:24]
    wire _T_1344 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1344 is invalid @[RegisterRouter.scala 62:24]
    node _T_1345 = and(_T_1326, _T_1078) @[RegisterRouter.scala 62:24]
    node _T_1346 = and(_T_1345, _T_602) @[RegisterRouter.scala 62:24]
    _T_1344 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_663[4] <= _T_1346 @[ReduceOthers.scala 39:69]
    _T_663[3] <= _T_1346 @[ReduceOthers.scala 39:69]
    _T_663[2] <= _T_1346 @[ReduceOthers.scala 39:69]
    node _T_1349 = eq(_T_602, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1350 = or(_T_1344, _T_1349) @[RegisterRouter.scala 62:24]
    wire _T_1352 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1352 is invalid @[RegisterRouter.scala 62:24]
    node _T_1353 = and(_T_1326, _T_1079) @[RegisterRouter.scala 62:24]
    node _T_1354 = and(_T_1353, _T_611) @[RegisterRouter.scala 62:24]
    _T_1352 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_663[5] <= _T_1354 @[ReduceOthers.scala 39:69]
    node _T_1357 = eq(_T_611, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1358 = or(_T_1352, _T_1357) @[RegisterRouter.scala 62:24]
    wire _T_1360 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1360 is invalid @[RegisterRouter.scala 62:24]
    node _T_1361 = and(_T_1326, _T_1080) @[RegisterRouter.scala 62:24]
    node _T_1362 = and(_T_1361, _T_620) @[RegisterRouter.scala 62:24]
    _T_1360 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    _T_663[6] <= _T_1362 @[ReduceOthers.scala 39:69]
    node _T_1365 = eq(_T_620, UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1366 = or(_T_1360, _T_1365) @[RegisterRouter.scala 62:24]
    wire _T_1368 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1368 is invalid @[RegisterRouter.scala 62:24]
    node _T_1369 = and(_T_1326, _T_1081) @[RegisterRouter.scala 62:24]
    node _T_1370 = and(_T_1369, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1368 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1373 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1374 = or(_T_1368, _T_1373) @[RegisterRouter.scala 62:24]
    wire _T_1376 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1376 is invalid @[RegisterRouter.scala 62:24]
    node _T_1377 = and(_T_1326, _T_1082) @[RegisterRouter.scala 62:24]
    node _T_1378 = and(_T_1377, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1376 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1381 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1382 = or(_T_1376, _T_1381) @[RegisterRouter.scala 62:24]
    wire _T_1384 : UInt<1> @[RegisterRouter.scala 62:24]
    _T_1384 is invalid @[RegisterRouter.scala 62:24]
    node _T_1385 = and(_T_1326, _T_1083) @[RegisterRouter.scala 62:24]
    node _T_1386 = and(_T_1385, UInt<1>("h01")) @[RegisterRouter.scala 62:24]
    _T_1384 <= UInt<1>("h01") @[ReduceOthers.scala 39:69]
    node _T_1389 = eq(UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    node _T_1390 = or(_T_1384, _T_1389) @[RegisterRouter.scala 62:24]
    wire _T_1393 : UInt<1>[8] @[RegisterRouter.scala 62:24]
    _T_1393 is invalid @[RegisterRouter.scala 62:24]
    _T_1393[0] <= _T_1334 @[RegisterRouter.scala 62:24]
    _T_1393[1] <= _T_1342 @[RegisterRouter.scala 62:24]
    _T_1393[2] <= _T_1350 @[RegisterRouter.scala 62:24]
    _T_1393[3] <= _T_1358 @[RegisterRouter.scala 62:24]
    _T_1393[4] <= _T_1366 @[RegisterRouter.scala 62:24]
    _T_1393[5] <= _T_1374 @[RegisterRouter.scala 62:24]
    _T_1393[6] <= _T_1382 @[RegisterRouter.scala 62:24]
    _T_1393[7] <= _T_1390 @[RegisterRouter.scala 62:24]
    node _T_1406 = mux(_T_555.bits.read, _T_1152[_T_1051], _T_1233[_T_1051]) @[RegisterRouter.scala 62:24]
    node _T_1409 = mux(_T_555.bits.read, _T_1312[_T_1063], _T_1393[_T_1063]) @[RegisterRouter.scala 62:24]
    node _T_1410 = and(_T_555.ready, _T_1406) @[RegisterRouter.scala 62:24]
    _T_537.ready <= _T_1410 @[RegisterRouter.scala 62:24]
    node _T_1411 = and(_T_537.valid, _T_1406) @[RegisterRouter.scala 62:24]
    _T_555.valid <= _T_1411 @[RegisterRouter.scala 62:24]
    node _T_1412 = and(_T_548.ready, _T_1409) @[RegisterRouter.scala 62:24]
    _T_555.ready <= _T_1412 @[RegisterRouter.scala 62:24]
    node _T_1413 = and(_T_555.valid, _T_1409) @[RegisterRouter.scala 62:24]
    _T_548.valid <= _T_1413 @[RegisterRouter.scala 62:24]
    _T_548.bits.read <= _T_555.bits.read @[RegisterRouter.scala 62:24]
    wire _T_1416 : UInt<1>[8] @[RegisterRouter.scala 62:24]
    _T_1416 is invalid @[RegisterRouter.scala 62:24]
    _T_1416[0] <= _T_584 @[RegisterRouter.scala 62:24]
    _T_1416[1] <= _T_593 @[RegisterRouter.scala 62:24]
    _T_1416[2] <= _T_602 @[RegisterRouter.scala 62:24]
    _T_1416[3] <= _T_611 @[RegisterRouter.scala 62:24]
    _T_1416[4] <= _T_620 @[RegisterRouter.scala 62:24]
    _T_1416[5] <= UInt<1>("h01") @[RegisterRouter.scala 62:24]
    _T_1416[6] <= UInt<1>("h01") @[RegisterRouter.scala 62:24]
    _T_1416[7] <= UInt<1>("h01") @[RegisterRouter.scala 62:24]
    wire _T_1430 : UInt<8>[8] @[RegisterRouter.scala 62:24]
    _T_1430 is invalid @[RegisterRouter.scala 62:24]
    _T_1430[0] <= _T_770 @[RegisterRouter.scala 62:24]
    _T_1430[1] <= _T_814 @[RegisterRouter.scala 62:24]
    _T_1430[2] <= _T_946 @[RegisterRouter.scala 62:24]
    _T_1430[3] <= _T_990 @[RegisterRouter.scala 62:24]
    _T_1430[4] <= _T_1039 @[RegisterRouter.scala 62:24]
    _T_1430[5] <= UInt<1>("h00") @[RegisterRouter.scala 62:24]
    _T_1430[6] <= UInt<1>("h00") @[RegisterRouter.scala 62:24]
    _T_1430[7] <= UInt<1>("h00") @[RegisterRouter.scala 62:24]
    node _T_1443 = mux(_T_1416[_T_1063], _T_1430[_T_1063], UInt<1>("h00")) @[RegisterRouter.scala 62:24]
    _T_548.bits.data <= _T_1443 @[RegisterRouter.scala 62:24]
    _T_548.bits.extra <= _T_555.bits.extra @[RegisterRouter.scala 62:24]
    _T_537.valid <= _T_26.a.valid @[RegisterRouter.scala 65:15]
    _T_26.a.ready <= _T_537.ready @[RegisterRouter.scala 66:15]
    _T_26.d.valid <= _T_548.valid @[RegisterRouter.scala 67:15]
    _T_548.ready <= _T_26.d.ready @[RegisterRouter.scala 68:15]
    node _T_1444 = bits(_T_548.bits.extra, 8, 2) @[RegisterRouter.scala 72:35]
    node _T_1445 = bits(_T_548.bits.extra, 1, 0) @[RegisterRouter.scala 73:35]
    wire _T_1448 : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, data : UInt<32>, error : UInt<1>} @[Edges.scala 646:17]
    _T_1448 is invalid @[Edges.scala 646:17]
    _T_1448.opcode <= UInt<1>("h00") @[Edges.scala 647:15]
    _T_1448.param <= UInt<1>("h00") @[Edges.scala 648:15]
    _T_1448.size <= _T_1445 @[Edges.scala 649:15]
    _T_1448.source <= _T_1444 @[Edges.scala 650:15]
    _T_1448.sink <= UInt<1>("h00") @[Edges.scala 651:15]
    _T_1448.data <= UInt<1>("h00") @[Edges.scala 652:15]
    _T_1448.error <= UInt<1>("h00") @[Edges.scala 653:15]
    _T_26.d.bits <- _T_1448 @[RegisterRouter.scala 71:12]
    _T_26.d.bits.data <= _T_548.bits.data @[RegisterRouter.scala 76:17]
    node _T_1455 = mux(_T_548.bits.read, UInt<1>("h01"), UInt<1>("h00")) @[RegisterRouter.scala 77:25]
    _T_26.d.bits.opcode <= _T_1455 @[RegisterRouter.scala 77:19]
    _T_26.b.valid <= UInt<1>("h00") @[RegisterRouter.scala 80:22]
    _T_26.c.ready <= UInt<1>("h01") @[RegisterRouter.scala 81:22]
    _T_26.e.ready <= UInt<1>("h01") @[RegisterRouter.scala 82:22]
    control.reserved <= UInt<1>("h00") @[I2C.scala 548:20]
    cmd.reserved <= UInt<1>("h00") @[I2C.scala 549:20]
    status.reserved <= UInt<1>("h00") @[I2C.scala 550:20]
    node _T_1462 = and(status.irqFlag, control.intEn) @[I2C.scala 552:35]
    interrupts[0] <= _T_1462 @[I2C.scala 552:17]
    
  module TLMonitor_72 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {a : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, b : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, address : UInt<29>, mask : UInt<4>, data : UInt<32>}}, c : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<3>, size : UInt<2>, source : UInt<7>, address : UInt<29>, data : UInt<32>, error : UInt<1>}}, d : {ready : UInt<1>, valid : UInt<1>, bits : {opcode : UInt<3>, param : UInt<2>, size : UInt<2>, source : UInt<7>, sink : UInt<1>, data : UInt<32>, error : UInt<1>}}, e : {ready : UInt<1>, valid : UInt<1>, bits : {sink : UInt<1>}}}}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_15 = bits(reset, 0, 0) @[compatibility.scala 247:56]
    when io.in.a.valid : @[Monitor.scala 301:27]
      node _T_17 = leq(io.in.a.bits.opcode, UInt<3>("h07")) @[Bundles.scala 40:24]
      node _T_18 = bits(reset, 0, 0) @[Monitor.scala 33:12]
      node _T_19 = or(_T_17, _T_18) @[Monitor.scala 33:12]
      node _T_21 = eq(_T_19, UInt<1>("h00")) @[Monitor.scala 33:12]
      when _T_21 : @[Monitor.scala 33:12]
        printf(clock, UInt<1>(1), "Assertion failed: 'A' channel has invalid opcode (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:33 assert (TLMessages.isA(bundle.opcode), \"'A' channel has invalid opcode\" + extra)\n") @[Monitor.scala 33:12]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 33:12]
        skip @[Monitor.scala 33:12]
      node _T_23 = or(io.in.a.bits.source, UInt<7>("h00")) @[Parameters.scala 49:29]
      node _T_24 = bits(_T_23, 6, 0) @[Parameters.scala 49:64]
      node _T_25 = shr(io.in.a.bits.source, 7) @[Parameters.scala 51:10]
      node _T_27 = eq(_T_25, UInt<1>("h00")) @[Parameters.scala 51:32]
      node _T_29 = leq(UInt<1>("h00"), _T_24) @[Parameters.scala 53:34]
      node _T_30 = and(_T_27, _T_29) @[Parameters.scala 51:69]
      node _T_32 = leq(_T_24, UInt<7>("h07f")) @[Parameters.scala 54:20]
      node _T_33 = and(_T_30, _T_32) @[Parameters.scala 53:50]
      wire _T_36 : UInt<1>[1] @[Parameters.scala 255:27]
      _T_36 is invalid @[Parameters.scala 255:27]
      _T_36[0] <= _T_33 @[Parameters.scala 255:27]
      node _T_41 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 104:70]
      node _T_42 = dshl(_T_41, io.in.a.bits.size) @[package.scala 104:77]
      node _T_43 = bits(_T_42, 1, 0) @[package.scala 104:82]
      node _T_44 = not(_T_43) @[package.scala 104:46]
      node _T_45 = and(io.in.a.bits.address, _T_44) @[Edges.scala 21:16]
      node _T_47 = eq(_T_45, UInt<1>("h00")) @[Edges.scala 21:24]
      node _T_48 = bits(io.in.a.bits.size, 0, 0) @[OneHot.scala 49:27]
      node _T_50 = dshl(UInt<1>("h01"), _T_48) @[OneHot.scala 50:12]
      node _T_51 = bits(_T_50, 1, 0) @[OneHot.scala 50:27]
      node _T_53 = or(_T_51, UInt<1>("h01")) @[Misc.scala 237:54]
      node _T_55 = geq(io.in.a.bits.size, UInt<2>("h02")) @[Misc.scala 241:21]
      node _T_57 = bits(_T_53, 1, 1) @[Misc.scala 244:26]
      node _T_58 = bits(io.in.a.bits.address, 1, 1) @[Misc.scala 245:26]
      node _T_60 = eq(_T_58, UInt<1>("h00")) @[Misc.scala 246:20]
      node _T_61 = and(UInt<1>("h01"), _T_60) @[Misc.scala 249:27]
      node _T_62 = and(_T_57, _T_61) @[Misc.scala 250:38]
      node _T_63 = or(_T_55, _T_62) @[Misc.scala 250:29]
      node _T_64 = and(UInt<1>("h01"), _T_58) @[Misc.scala 249:27]
      node _T_65 = and(_T_57, _T_64) @[Misc.scala 250:38]
      node _T_66 = or(_T_55, _T_65) @[Misc.scala 250:29]
      node _T_67 = bits(_T_53, 0, 0) @[Misc.scala 244:26]
      node _T_68 = bits(io.in.a.bits.address, 0, 0) @[Misc.scala 245:26]
      node _T_70 = eq(_T_68, UInt<1>("h00")) @[Misc.scala 246:20]
      node _T_71 = and(_T_61, _T_70) @[Misc.scala 249:27]
      node _T_72 = and(_T_67, _T_71) @[Misc.scala 250:38]
      node _T_73 = or(_T_63, _T_72) @[Misc.scala 250:29]
      node _T_74 = and(_T_61, _T_68) @[Misc.scala 249:27]
      node _T_75 = and(_T_67, _T_74) @[Misc.scala 250:38]
      node _T_76 = or(_T_63, _T_75) @[Misc.scala 250:29]
      node _T_77 = and(_T_64, _T_70) @[Misc.scala 249:27]
      node _T_78 = and(_T_67, _T_77) @[Misc.scala 250:38]
      node _T_79 = or(_T_66, _T_78) @[Misc.scala 250:29]
      node _T_80 = and(_T_64, _T_68) @[Misc.scala 249:27]
      node _T_81 = and(_T_67, _T_80) @[Misc.scala 250:38]
      node _T_82 = or(_T_66, _T_81) @[Misc.scala 250:29]
      node _T_83 = cat(_T_76, _T_73) @[Cat.scala 30:58]
      node _T_84 = cat(_T_82, _T_79) @[Cat.scala 30:58]
      node _T_85 = cat(_T_84, _T_83) @[Cat.scala 30:58]
      node _T_87 = eq(io.in.a.bits.opcode, UInt<3>("h06")) @[Monitor.scala 40:25]
      when _T_87 : @[Monitor.scala 40:54]
        node _T_90 = or(UInt<1>("h00"), UInt<1>("h00")) @[Parameters.scala 157:31]
        node _T_92 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_93 = cvt(_T_92) @[Parameters.scala 119:49]
        node _T_95 = and(_T_93, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_96 = asSInt(_T_95) @[Parameters.scala 119:52]
        node _T_98 = eq(_T_96, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_99 = and(_T_90, _T_98) @[Parameters.scala 157:56]
        node _T_101 = or(UInt<1>("h00"), _T_99) @[Parameters.scala 159:30]
        node _T_102 = bits(reset, 0, 0) @[Monitor.scala 41:14]
        node _T_103 = or(_T_101, _T_102) @[Monitor.scala 41:14]
        node _T_105 = eq(_T_103, UInt<1>("h00")) @[Monitor.scala 41:14]
        when _T_105 : @[Monitor.scala 41:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries AcquireBlock type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:41 assert (edge.manager.supportsAcquireBSafe(edge.address(bundle), bundle.size), \"'A' channel carries AcquireBlock type unsupported by manager\" + extra)\n") @[Monitor.scala 41:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 41:14]
          skip @[Monitor.scala 41:14]
        node _T_107 = bits(reset, 0, 0) @[Monitor.scala 42:14]
        node _T_108 = or(UInt<1>("h00"), _T_107) @[Monitor.scala 42:14]
        node _T_110 = eq(_T_108, UInt<1>("h00")) @[Monitor.scala 42:14]
        when _T_110 : @[Monitor.scala 42:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:42 assert (edge.client.supportsProbe(edge.source(bundle), bundle.size), \"'A' channel carries AcquireBlock from a client which does not support Probe\" + extra)\n") @[Monitor.scala 42:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 42:14]
          skip @[Monitor.scala 42:14]
        node _T_111 = bits(reset, 0, 0) @[Monitor.scala 43:14]
        node _T_112 = or(_T_36[0], _T_111) @[Monitor.scala 43:14]
        node _T_114 = eq(_T_112, UInt<1>("h00")) @[Monitor.scala 43:14]
        when _T_114 : @[Monitor.scala 43:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:43 assert (source_ok, \"'A' channel AcquireBlock carries invalid source ID\" + extra)\n") @[Monitor.scala 43:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 43:14]
          skip @[Monitor.scala 43:14]
        node _T_116 = geq(io.in.a.bits.size, UInt<2>("h02")) @[Monitor.scala 44:27]
        node _T_117 = bits(reset, 0, 0) @[Monitor.scala 44:14]
        node _T_118 = or(_T_116, _T_117) @[Monitor.scala 44:14]
        node _T_120 = eq(_T_118, UInt<1>("h00")) @[Monitor.scala 44:14]
        when _T_120 : @[Monitor.scala 44:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:44 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel AcquireBlock smaller than a beat\" + extra)\n") @[Monitor.scala 44:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 44:14]
          skip @[Monitor.scala 44:14]
        node _T_121 = bits(reset, 0, 0) @[Monitor.scala 45:14]
        node _T_122 = or(_T_47, _T_121) @[Monitor.scala 45:14]
        node _T_124 = eq(_T_122, UInt<1>("h00")) @[Monitor.scala 45:14]
        when _T_124 : @[Monitor.scala 45:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:45 assert (is_aligned, \"'A' channel AcquireBlock address not aligned to size\" + extra)\n") @[Monitor.scala 45:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 45:14]
          skip @[Monitor.scala 45:14]
        node _T_126 = leq(io.in.a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node _T_127 = bits(reset, 0, 0) @[Monitor.scala 46:14]
        node _T_128 = or(_T_126, _T_127) @[Monitor.scala 46:14]
        node _T_130 = eq(_T_128, UInt<1>("h00")) @[Monitor.scala 46:14]
        when _T_130 : @[Monitor.scala 46:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:46 assert (TLPermissions.isGrow(bundle.param), \"'A' channel AcquireBlock carries invalid grow param\" + extra)\n") @[Monitor.scala 46:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 46:14]
          skip @[Monitor.scala 46:14]
        node _T_131 = not(io.in.a.bits.mask) @[Monitor.scala 47:15]
        node _T_133 = eq(_T_131, UInt<1>("h00")) @[Monitor.scala 47:28]
        node _T_134 = bits(reset, 0, 0) @[Monitor.scala 47:14]
        node _T_135 = or(_T_133, _T_134) @[Monitor.scala 47:14]
        node _T_137 = eq(_T_135, UInt<1>("h00")) @[Monitor.scala 47:14]
        when _T_137 : @[Monitor.scala 47:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:47 assert (~bundle.mask === UInt(0), \"'A' channel AcquireBlock contains invalid mask\" + extra)\n") @[Monitor.scala 47:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 47:14]
          skip @[Monitor.scala 47:14]
        skip @[Monitor.scala 40:54]
      node _T_139 = eq(io.in.a.bits.opcode, UInt<3>("h07")) @[Monitor.scala 50:25]
      when _T_139 : @[Monitor.scala 50:53]
        node _T_142 = or(UInt<1>("h00"), UInt<1>("h00")) @[Parameters.scala 157:31]
        node _T_144 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_145 = cvt(_T_144) @[Parameters.scala 119:49]
        node _T_147 = and(_T_145, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_148 = asSInt(_T_147) @[Parameters.scala 119:52]
        node _T_150 = eq(_T_148, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_151 = and(_T_142, _T_150) @[Parameters.scala 157:56]
        node _T_153 = or(UInt<1>("h00"), _T_151) @[Parameters.scala 159:30]
        node _T_154 = bits(reset, 0, 0) @[Monitor.scala 51:14]
        node _T_155 = or(_T_153, _T_154) @[Monitor.scala 51:14]
        node _T_157 = eq(_T_155, UInt<1>("h00")) @[Monitor.scala 51:14]
        when _T_157 : @[Monitor.scala 51:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries AcquirePerm type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:51 assert (edge.manager.supportsAcquireBSafe(edge.address(bundle), bundle.size), \"'A' channel carries AcquirePerm type unsupported by manager\" + extra)\n") @[Monitor.scala 51:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 51:14]
          skip @[Monitor.scala 51:14]
        node _T_159 = bits(reset, 0, 0) @[Monitor.scala 52:14]
        node _T_160 = or(UInt<1>("h00"), _T_159) @[Monitor.scala 52:14]
        node _T_162 = eq(_T_160, UInt<1>("h00")) @[Monitor.scala 52:14]
        when _T_162 : @[Monitor.scala 52:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:52 assert (edge.client.supportsProbe(edge.source(bundle), bundle.size), \"'A' channel carries AcquirePerm from a client which does not support Probe\" + extra)\n") @[Monitor.scala 52:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 52:14]
          skip @[Monitor.scala 52:14]
        node _T_163 = bits(reset, 0, 0) @[Monitor.scala 53:14]
        node _T_164 = or(_T_36[0], _T_163) @[Monitor.scala 53:14]
        node _T_166 = eq(_T_164, UInt<1>("h00")) @[Monitor.scala 53:14]
        when _T_166 : @[Monitor.scala 53:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:53 assert (source_ok, \"'A' channel AcquirePerm carries invalid source ID\" + extra)\n") @[Monitor.scala 53:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 53:14]
          skip @[Monitor.scala 53:14]
        node _T_168 = geq(io.in.a.bits.size, UInt<2>("h02")) @[Monitor.scala 54:27]
        node _T_169 = bits(reset, 0, 0) @[Monitor.scala 54:14]
        node _T_170 = or(_T_168, _T_169) @[Monitor.scala 54:14]
        node _T_172 = eq(_T_170, UInt<1>("h00")) @[Monitor.scala 54:14]
        when _T_172 : @[Monitor.scala 54:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:54 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'A' channel AcquirePerm smaller than a beat\" + extra)\n") @[Monitor.scala 54:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 54:14]
          skip @[Monitor.scala 54:14]
        node _T_173 = bits(reset, 0, 0) @[Monitor.scala 55:14]
        node _T_174 = or(_T_47, _T_173) @[Monitor.scala 55:14]
        node _T_176 = eq(_T_174, UInt<1>("h00")) @[Monitor.scala 55:14]
        when _T_176 : @[Monitor.scala 55:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:55 assert (is_aligned, \"'A' channel AcquirePerm address not aligned to size\" + extra)\n") @[Monitor.scala 55:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 55:14]
          skip @[Monitor.scala 55:14]
        node _T_178 = leq(io.in.a.bits.param, UInt<2>("h02")) @[Bundles.scala 71:27]
        node _T_179 = bits(reset, 0, 0) @[Monitor.scala 56:14]
        node _T_180 = or(_T_178, _T_179) @[Monitor.scala 56:14]
        node _T_182 = eq(_T_180, UInt<1>("h00")) @[Monitor.scala 56:14]
        when _T_182 : @[Monitor.scala 56:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:56 assert (TLPermissions.isGrow(bundle.param), \"'A' channel AcquirePerm carries invalid grow param\" + extra)\n") @[Monitor.scala 56:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 56:14]
          skip @[Monitor.scala 56:14]
        node _T_184 = neq(io.in.a.bits.param, UInt<2>("h00")) @[Monitor.scala 57:28]
        node _T_185 = bits(reset, 0, 0) @[Monitor.scala 57:14]
        node _T_186 = or(_T_184, _T_185) @[Monitor.scala 57:14]
        node _T_188 = eq(_T_186, UInt<1>("h00")) @[Monitor.scala 57:14]
        when _T_188 : @[Monitor.scala 57:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:57 assert (bundle.param =/= TLPermissions.NtoB, \"'A' channel AcquirePerm requests NtoB\" + extra)\n") @[Monitor.scala 57:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 57:14]
          skip @[Monitor.scala 57:14]
        node _T_189 = not(io.in.a.bits.mask) @[Monitor.scala 58:15]
        node _T_191 = eq(_T_189, UInt<1>("h00")) @[Monitor.scala 58:28]
        node _T_192 = bits(reset, 0, 0) @[Monitor.scala 58:14]
        node _T_193 = or(_T_191, _T_192) @[Monitor.scala 58:14]
        node _T_195 = eq(_T_193, UInt<1>("h00")) @[Monitor.scala 58:14]
        when _T_195 : @[Monitor.scala 58:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:58 assert (~bundle.mask === UInt(0), \"'A' channel AcquirePerm contains invalid mask\" + extra)\n") @[Monitor.scala 58:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 58:14]
          skip @[Monitor.scala 58:14]
        skip @[Monitor.scala 50:53]
      node _T_197 = eq(io.in.a.bits.opcode, UInt<3>("h04")) @[Monitor.scala 61:25]
      when _T_197 : @[Monitor.scala 61:45]
        node _T_200 = leq(UInt<1>("h00"), io.in.a.bits.size) @[Parameters.scala 88:32]
        node _T_202 = leq(io.in.a.bits.size, UInt<2>("h02")) @[Parameters.scala 88:42]
        node _T_203 = and(_T_200, _T_202) @[Parameters.scala 88:37]
        node _T_204 = or(UInt<1>("h00"), _T_203) @[Parameters.scala 157:31]
        node _T_206 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_207 = cvt(_T_206) @[Parameters.scala 119:49]
        node _T_209 = and(_T_207, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_210 = asSInt(_T_209) @[Parameters.scala 119:52]
        node _T_212 = eq(_T_210, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_213 = and(_T_204, _T_212) @[Parameters.scala 157:56]
        node _T_215 = or(UInt<1>("h00"), _T_213) @[Parameters.scala 159:30]
        node _T_216 = bits(reset, 0, 0) @[Monitor.scala 62:14]
        node _T_217 = or(_T_215, _T_216) @[Monitor.scala 62:14]
        node _T_219 = eq(_T_217, UInt<1>("h00")) @[Monitor.scala 62:14]
        when _T_219 : @[Monitor.scala 62:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries Get type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:62 assert (edge.manager.supportsGetSafe(edge.address(bundle), bundle.size), \"'A' channel carries Get type unsupported by manager\" + extra)\n") @[Monitor.scala 62:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 62:14]
          skip @[Monitor.scala 62:14]
        node _T_220 = bits(reset, 0, 0) @[Monitor.scala 63:14]
        node _T_221 = or(_T_36[0], _T_220) @[Monitor.scala 63:14]
        node _T_223 = eq(_T_221, UInt<1>("h00")) @[Monitor.scala 63:14]
        when _T_223 : @[Monitor.scala 63:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:63 assert (source_ok, \"'A' channel Get carries invalid source ID\" + extra)\n") @[Monitor.scala 63:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 63:14]
          skip @[Monitor.scala 63:14]
        node _T_224 = bits(reset, 0, 0) @[Monitor.scala 64:14]
        node _T_225 = or(_T_47, _T_224) @[Monitor.scala 64:14]
        node _T_227 = eq(_T_225, UInt<1>("h00")) @[Monitor.scala 64:14]
        when _T_227 : @[Monitor.scala 64:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Get address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:64 assert (is_aligned, \"'A' channel Get address not aligned to size\" + extra)\n") @[Monitor.scala 64:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 64:14]
          skip @[Monitor.scala 64:14]
        node _T_229 = eq(io.in.a.bits.param, UInt<1>("h00")) @[Monitor.scala 65:28]
        node _T_230 = bits(reset, 0, 0) @[Monitor.scala 65:14]
        node _T_231 = or(_T_229, _T_230) @[Monitor.scala 65:14]
        node _T_233 = eq(_T_231, UInt<1>("h00")) @[Monitor.scala 65:14]
        when _T_233 : @[Monitor.scala 65:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Get carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:65 assert (bundle.param === UInt(0), \"'A' channel Get carries invalid param\" + extra)\n") @[Monitor.scala 65:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 65:14]
          skip @[Monitor.scala 65:14]
        node _T_234 = eq(io.in.a.bits.mask, _T_85) @[Monitor.scala 66:27]
        node _T_235 = bits(reset, 0, 0) @[Monitor.scala 66:14]
        node _T_236 = or(_T_234, _T_235) @[Monitor.scala 66:14]
        node _T_238 = eq(_T_236, UInt<1>("h00")) @[Monitor.scala 66:14]
        when _T_238 : @[Monitor.scala 66:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Get contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:66 assert (bundle.mask === mask, \"'A' channel Get contains invalid mask\" + extra)\n") @[Monitor.scala 66:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 66:14]
          skip @[Monitor.scala 66:14]
        skip @[Monitor.scala 61:45]
      node _T_240 = eq(io.in.a.bits.opcode, UInt<1>("h00")) @[Monitor.scala 69:25]
      when _T_240 : @[Monitor.scala 69:53]
        node _T_243 = leq(UInt<1>("h00"), io.in.a.bits.size) @[Parameters.scala 88:32]
        node _T_245 = leq(io.in.a.bits.size, UInt<2>("h02")) @[Parameters.scala 88:42]
        node _T_246 = and(_T_243, _T_245) @[Parameters.scala 88:37]
        node _T_247 = or(UInt<1>("h00"), _T_246) @[Parameters.scala 157:31]
        node _T_249 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_250 = cvt(_T_249) @[Parameters.scala 119:49]
        node _T_252 = and(_T_250, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_253 = asSInt(_T_252) @[Parameters.scala 119:52]
        node _T_255 = eq(_T_253, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_256 = and(_T_247, _T_255) @[Parameters.scala 157:56]
        node _T_258 = or(UInt<1>("h00"), _T_256) @[Parameters.scala 159:30]
        node _T_259 = bits(reset, 0, 0) @[Monitor.scala 70:14]
        node _T_260 = or(_T_258, _T_259) @[Monitor.scala 70:14]
        node _T_262 = eq(_T_260, UInt<1>("h00")) @[Monitor.scala 70:14]
        when _T_262 : @[Monitor.scala 70:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries PutFull type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:70 assert (edge.manager.supportsPutFullSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutFull type unsupported by manager\" + extra)\n") @[Monitor.scala 70:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 70:14]
          skip @[Monitor.scala 70:14]
        node _T_263 = bits(reset, 0, 0) @[Monitor.scala 71:14]
        node _T_264 = or(_T_36[0], _T_263) @[Monitor.scala 71:14]
        node _T_266 = eq(_T_264, UInt<1>("h00")) @[Monitor.scala 71:14]
        when _T_266 : @[Monitor.scala 71:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:71 assert (source_ok, \"'A' channel PutFull carries invalid source ID\" + extra)\n") @[Monitor.scala 71:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 71:14]
          skip @[Monitor.scala 71:14]
        node _T_267 = bits(reset, 0, 0) @[Monitor.scala 72:14]
        node _T_268 = or(_T_47, _T_267) @[Monitor.scala 72:14]
        node _T_270 = eq(_T_268, UInt<1>("h00")) @[Monitor.scala 72:14]
        when _T_270 : @[Monitor.scala 72:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:72 assert (is_aligned, \"'A' channel PutFull address not aligned to size\" + extra)\n") @[Monitor.scala 72:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 72:14]
          skip @[Monitor.scala 72:14]
        node _T_272 = eq(io.in.a.bits.param, UInt<1>("h00")) @[Monitor.scala 73:28]
        node _T_273 = bits(reset, 0, 0) @[Monitor.scala 73:14]
        node _T_274 = or(_T_272, _T_273) @[Monitor.scala 73:14]
        node _T_276 = eq(_T_274, UInt<1>("h00")) @[Monitor.scala 73:14]
        when _T_276 : @[Monitor.scala 73:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutFull carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:73 assert (bundle.param === UInt(0), \"'A' channel PutFull carries invalid param\" + extra)\n") @[Monitor.scala 73:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 73:14]
          skip @[Monitor.scala 73:14]
        node _T_277 = eq(io.in.a.bits.mask, _T_85) @[Monitor.scala 74:27]
        node _T_278 = bits(reset, 0, 0) @[Monitor.scala 74:14]
        node _T_279 = or(_T_277, _T_278) @[Monitor.scala 74:14]
        node _T_281 = eq(_T_279, UInt<1>("h00")) @[Monitor.scala 74:14]
        when _T_281 : @[Monitor.scala 74:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:74 assert (bundle.mask === mask, \"'A' channel PutFull contains invalid mask\" + extra)\n") @[Monitor.scala 74:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 74:14]
          skip @[Monitor.scala 74:14]
        skip @[Monitor.scala 69:53]
      node _T_283 = eq(io.in.a.bits.opcode, UInt<1>("h01")) @[Monitor.scala 77:25]
      when _T_283 : @[Monitor.scala 77:56]
        node _T_286 = leq(UInt<1>("h00"), io.in.a.bits.size) @[Parameters.scala 88:32]
        node _T_288 = leq(io.in.a.bits.size, UInt<2>("h02")) @[Parameters.scala 88:42]
        node _T_289 = and(_T_286, _T_288) @[Parameters.scala 88:37]
        node _T_290 = or(UInt<1>("h00"), _T_289) @[Parameters.scala 157:31]
        node _T_292 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_293 = cvt(_T_292) @[Parameters.scala 119:49]
        node _T_295 = and(_T_293, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_296 = asSInt(_T_295) @[Parameters.scala 119:52]
        node _T_298 = eq(_T_296, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_299 = and(_T_290, _T_298) @[Parameters.scala 157:56]
        node _T_301 = or(UInt<1>("h00"), _T_299) @[Parameters.scala 159:30]
        node _T_302 = bits(reset, 0, 0) @[Monitor.scala 78:14]
        node _T_303 = or(_T_301, _T_302) @[Monitor.scala 78:14]
        node _T_305 = eq(_T_303, UInt<1>("h00")) @[Monitor.scala 78:14]
        when _T_305 : @[Monitor.scala 78:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries PutPartial type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:78 assert (edge.manager.supportsPutPartialSafe(edge.address(bundle), bundle.size), \"'A' channel carries PutPartial type unsupported by manager\" + extra)\n") @[Monitor.scala 78:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 78:14]
          skip @[Monitor.scala 78:14]
        node _T_306 = bits(reset, 0, 0) @[Monitor.scala 79:14]
        node _T_307 = or(_T_36[0], _T_306) @[Monitor.scala 79:14]
        node _T_309 = eq(_T_307, UInt<1>("h00")) @[Monitor.scala 79:14]
        when _T_309 : @[Monitor.scala 79:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:79 assert (source_ok, \"'A' channel PutPartial carries invalid source ID\" + extra)\n") @[Monitor.scala 79:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 79:14]
          skip @[Monitor.scala 79:14]
        node _T_310 = bits(reset, 0, 0) @[Monitor.scala 80:14]
        node _T_311 = or(_T_47, _T_310) @[Monitor.scala 80:14]
        node _T_313 = eq(_T_311, UInt<1>("h00")) @[Monitor.scala 80:14]
        when _T_313 : @[Monitor.scala 80:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:80 assert (is_aligned, \"'A' channel PutPartial address not aligned to size\" + extra)\n") @[Monitor.scala 80:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 80:14]
          skip @[Monitor.scala 80:14]
        node _T_315 = eq(io.in.a.bits.param, UInt<1>("h00")) @[Monitor.scala 81:28]
        node _T_316 = bits(reset, 0, 0) @[Monitor.scala 81:14]
        node _T_317 = or(_T_315, _T_316) @[Monitor.scala 81:14]
        node _T_319 = eq(_T_317, UInt<1>("h00")) @[Monitor.scala 81:14]
        when _T_319 : @[Monitor.scala 81:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:81 assert (bundle.param === UInt(0), \"'A' channel PutPartial carries invalid param\" + extra)\n") @[Monitor.scala 81:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 81:14]
          skip @[Monitor.scala 81:14]
        node _T_320 = not(_T_85) @[Monitor.scala 82:30]
        node _T_321 = and(io.in.a.bits.mask, _T_320) @[Monitor.scala 82:28]
        node _T_323 = eq(_T_321, UInt<1>("h00")) @[Monitor.scala 82:37]
        node _T_324 = bits(reset, 0, 0) @[Monitor.scala 82:14]
        node _T_325 = or(_T_323, _T_324) @[Monitor.scala 82:14]
        node _T_327 = eq(_T_325, UInt<1>("h00")) @[Monitor.scala 82:14]
        when _T_327 : @[Monitor.scala 82:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:82 assert ((bundle.mask & ~mask) === UInt(0), \"'A' channel PutPartial contains invalid mask\" + extra)\n") @[Monitor.scala 82:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 82:14]
          skip @[Monitor.scala 82:14]
        skip @[Monitor.scala 77:56]
      node _T_329 = eq(io.in.a.bits.opcode, UInt<2>("h02")) @[Monitor.scala 85:25]
      when _T_329 : @[Monitor.scala 85:56]
        node _T_332 = or(UInt<1>("h00"), UInt<1>("h00")) @[Parameters.scala 157:31]
        node _T_334 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_335 = cvt(_T_334) @[Parameters.scala 119:49]
        node _T_337 = and(_T_335, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_338 = asSInt(_T_337) @[Parameters.scala 119:52]
        node _T_340 = eq(_T_338, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_341 = and(_T_332, _T_340) @[Parameters.scala 157:56]
        node _T_343 = or(UInt<1>("h00"), _T_341) @[Parameters.scala 159:30]
        node _T_344 = bits(reset, 0, 0) @[Monitor.scala 86:14]
        node _T_345 = or(_T_343, _T_344) @[Monitor.scala 86:14]
        node _T_347 = eq(_T_345, UInt<1>("h00")) @[Monitor.scala 86:14]
        when _T_347 : @[Monitor.scala 86:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries Arithmetic type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:86 assert (edge.manager.supportsArithmeticSafe(edge.address(bundle), bundle.size), \"'A' channel carries Arithmetic type unsupported by manager\" + extra)\n") @[Monitor.scala 86:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 86:14]
          skip @[Monitor.scala 86:14]
        node _T_348 = bits(reset, 0, 0) @[Monitor.scala 87:14]
        node _T_349 = or(_T_36[0], _T_348) @[Monitor.scala 87:14]
        node _T_351 = eq(_T_349, UInt<1>("h00")) @[Monitor.scala 87:14]
        when _T_351 : @[Monitor.scala 87:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:87 assert (source_ok, \"'A' channel Arithmetic carries invalid source ID\" + extra)\n") @[Monitor.scala 87:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 87:14]
          skip @[Monitor.scala 87:14]
        node _T_352 = bits(reset, 0, 0) @[Monitor.scala 88:14]
        node _T_353 = or(_T_47, _T_352) @[Monitor.scala 88:14]
        node _T_355 = eq(_T_353, UInt<1>("h00")) @[Monitor.scala 88:14]
        when _T_355 : @[Monitor.scala 88:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:88 assert (is_aligned, \"'A' channel Arithmetic address not aligned to size\" + extra)\n") @[Monitor.scala 88:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 88:14]
          skip @[Monitor.scala 88:14]
        node _T_357 = leq(io.in.a.bits.param, UInt<3>("h04")) @[Bundles.scala 96:33]
        node _T_358 = bits(reset, 0, 0) @[Monitor.scala 89:14]
        node _T_359 = or(_T_357, _T_358) @[Monitor.scala 89:14]
        node _T_361 = eq(_T_359, UInt<1>("h00")) @[Monitor.scala 89:14]
        when _T_361 : @[Monitor.scala 89:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:89 assert (TLAtomics.isArithmetic(bundle.param), \"'A' channel Arithmetic carries invalid opcode param\" + extra)\n") @[Monitor.scala 89:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 89:14]
          skip @[Monitor.scala 89:14]
        node _T_362 = eq(io.in.a.bits.mask, _T_85) @[Monitor.scala 90:27]
        node _T_363 = bits(reset, 0, 0) @[Monitor.scala 90:14]
        node _T_364 = or(_T_362, _T_363) @[Monitor.scala 90:14]
        node _T_366 = eq(_T_364, UInt<1>("h00")) @[Monitor.scala 90:14]
        when _T_366 : @[Monitor.scala 90:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:90 assert (bundle.mask === mask, \"'A' channel Arithmetic contains invalid mask\" + extra)\n") @[Monitor.scala 90:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 90:14]
          skip @[Monitor.scala 90:14]
        skip @[Monitor.scala 85:56]
      node _T_368 = eq(io.in.a.bits.opcode, UInt<2>("h03")) @[Monitor.scala 93:25]
      when _T_368 : @[Monitor.scala 93:53]
        node _T_371 = or(UInt<1>("h00"), UInt<1>("h00")) @[Parameters.scala 157:31]
        node _T_373 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_374 = cvt(_T_373) @[Parameters.scala 119:49]
        node _T_376 = and(_T_374, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_377 = asSInt(_T_376) @[Parameters.scala 119:52]
        node _T_379 = eq(_T_377, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_380 = and(_T_371, _T_379) @[Parameters.scala 157:56]
        node _T_382 = or(UInt<1>("h00"), _T_380) @[Parameters.scala 159:30]
        node _T_383 = bits(reset, 0, 0) @[Monitor.scala 94:14]
        node _T_384 = or(_T_382, _T_383) @[Monitor.scala 94:14]
        node _T_386 = eq(_T_384, UInt<1>("h00")) @[Monitor.scala 94:14]
        when _T_386 : @[Monitor.scala 94:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries Logical type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:94 assert (edge.manager.supportsLogicalSafe(edge.address(bundle), bundle.size), \"'A' channel carries Logical type unsupported by manager\" + extra)\n") @[Monitor.scala 94:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 94:14]
          skip @[Monitor.scala 94:14]
        node _T_387 = bits(reset, 0, 0) @[Monitor.scala 95:14]
        node _T_388 = or(_T_36[0], _T_387) @[Monitor.scala 95:14]
        node _T_390 = eq(_T_388, UInt<1>("h00")) @[Monitor.scala 95:14]
        when _T_390 : @[Monitor.scala 95:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:95 assert (source_ok, \"'A' channel Logical carries invalid source ID\" + extra)\n") @[Monitor.scala 95:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 95:14]
          skip @[Monitor.scala 95:14]
        node _T_391 = bits(reset, 0, 0) @[Monitor.scala 96:14]
        node _T_392 = or(_T_47, _T_391) @[Monitor.scala 96:14]
        node _T_394 = eq(_T_392, UInt<1>("h00")) @[Monitor.scala 96:14]
        when _T_394 : @[Monitor.scala 96:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Logical address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:96 assert (is_aligned, \"'A' channel Logical address not aligned to size\" + extra)\n") @[Monitor.scala 96:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 96:14]
          skip @[Monitor.scala 96:14]
        node _T_396 = leq(io.in.a.bits.param, UInt<3>("h03")) @[Bundles.scala 103:30]
        node _T_397 = bits(reset, 0, 0) @[Monitor.scala 97:14]
        node _T_398 = or(_T_396, _T_397) @[Monitor.scala 97:14]
        node _T_400 = eq(_T_398, UInt<1>("h00")) @[Monitor.scala 97:14]
        when _T_400 : @[Monitor.scala 97:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:97 assert (TLAtomics.isLogical(bundle.param), \"'A' channel Logical carries invalid opcode param\" + extra)\n") @[Monitor.scala 97:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 97:14]
          skip @[Monitor.scala 97:14]
        node _T_401 = eq(io.in.a.bits.mask, _T_85) @[Monitor.scala 98:27]
        node _T_402 = bits(reset, 0, 0) @[Monitor.scala 98:14]
        node _T_403 = or(_T_401, _T_402) @[Monitor.scala 98:14]
        node _T_405 = eq(_T_403, UInt<1>("h00")) @[Monitor.scala 98:14]
        when _T_405 : @[Monitor.scala 98:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Logical contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:98 assert (bundle.mask === mask, \"'A' channel Logical contains invalid mask\" + extra)\n") @[Monitor.scala 98:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 98:14]
          skip @[Monitor.scala 98:14]
        skip @[Monitor.scala 93:53]
      node _T_407 = eq(io.in.a.bits.opcode, UInt<3>("h05")) @[Monitor.scala 101:25]
      when _T_407 : @[Monitor.scala 101:46]
        node _T_410 = or(UInt<1>("h00"), UInt<1>("h00")) @[Parameters.scala 157:31]
        node _T_412 = xor(io.in.a.bits.address, UInt<29>("h010016000")) @[Parameters.scala 119:31]
        node _T_413 = cvt(_T_412) @[Parameters.scala 119:49]
        node _T_415 = and(_T_413, asSInt(UInt<13>("h01000"))) @[Parameters.scala 119:52]
        node _T_416 = asSInt(_T_415) @[Parameters.scala 119:52]
        node _T_418 = eq(_T_416, asSInt(UInt<1>("h00"))) @[Parameters.scala 119:67]
        node _T_419 = and(_T_410, _T_418) @[Parameters.scala 157:56]
        node _T_421 = or(UInt<1>("h00"), _T_419) @[Parameters.scala 159:30]
        node _T_422 = bits(reset, 0, 0) @[Monitor.scala 102:14]
        node _T_423 = or(_T_421, _T_422) @[Monitor.scala 102:14]
        node _T_425 = eq(_T_423, UInt<1>("h00")) @[Monitor.scala 102:14]
        when _T_425 : @[Monitor.scala 102:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel carries Hint type unsupported by manager (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:102 assert (edge.manager.supportsHintSafe(edge.address(bundle), bundle.size), \"'A' channel carries Hint type unsupported by manager\" + extra)\n") @[Monitor.scala 102:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 102:14]
          skip @[Monitor.scala 102:14]
        node _T_426 = bits(reset, 0, 0) @[Monitor.scala 103:14]
        node _T_427 = or(_T_36[0], _T_426) @[Monitor.scala 103:14]
        node _T_429 = eq(_T_427, UInt<1>("h00")) @[Monitor.scala 103:14]
        when _T_429 : @[Monitor.scala 103:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:103 assert (source_ok, \"'A' channel Hint carries invalid source ID\" + extra)\n") @[Monitor.scala 103:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 103:14]
          skip @[Monitor.scala 103:14]
        node _T_430 = bits(reset, 0, 0) @[Monitor.scala 104:14]
        node _T_431 = or(_T_47, _T_430) @[Monitor.scala 104:14]
        node _T_433 = eq(_T_431, UInt<1>("h00")) @[Monitor.scala 104:14]
        when _T_433 : @[Monitor.scala 104:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Hint address not aligned to size (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:104 assert (is_aligned, \"'A' channel Hint address not aligned to size\" + extra)\n") @[Monitor.scala 104:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 104:14]
          skip @[Monitor.scala 104:14]
        node _T_434 = eq(io.in.a.bits.mask, _T_85) @[Monitor.scala 105:27]
        node _T_435 = bits(reset, 0, 0) @[Monitor.scala 105:14]
        node _T_436 = or(_T_434, _T_435) @[Monitor.scala 105:14]
        node _T_438 = eq(_T_436, UInt<1>("h00")) @[Monitor.scala 105:14]
        when _T_438 : @[Monitor.scala 105:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'A' channel Hint contains invalid mask (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:105 assert (bundle.mask === mask, \"'A' channel Hint contains invalid mask\" + extra)\n") @[Monitor.scala 105:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 105:14]
          skip @[Monitor.scala 105:14]
        skip @[Monitor.scala 101:46]
      skip @[Monitor.scala 301:27]
    when io.in.d.valid : @[Monitor.scala 302:27]
      node _T_440 = leq(io.in.d.bits.opcode, UInt<3>("h06")) @[Bundles.scala 43:24]
      node _T_441 = bits(reset, 0, 0) @[Monitor.scala 247:12]
      node _T_442 = or(_T_440, _T_441) @[Monitor.scala 247:12]
      node _T_444 = eq(_T_442, UInt<1>("h00")) @[Monitor.scala 247:12]
      when _T_444 : @[Monitor.scala 247:12]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel has invalid opcode (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:247 assert (TLMessages.isD(bundle.opcode), \"'D' channel has invalid opcode\" + extra)\n") @[Monitor.scala 247:12]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 247:12]
        skip @[Monitor.scala 247:12]
      node _T_446 = or(io.in.d.bits.source, UInt<7>("h00")) @[Parameters.scala 49:29]
      node _T_447 = bits(_T_446, 6, 0) @[Parameters.scala 49:64]
      node _T_448 = shr(io.in.d.bits.source, 7) @[Parameters.scala 51:10]
      node _T_450 = eq(_T_448, UInt<1>("h00")) @[Parameters.scala 51:32]
      node _T_452 = leq(UInt<1>("h00"), _T_447) @[Parameters.scala 53:34]
      node _T_453 = and(_T_450, _T_452) @[Parameters.scala 51:69]
      node _T_455 = leq(_T_447, UInt<7>("h07f")) @[Parameters.scala 54:20]
      node _T_456 = and(_T_453, _T_455) @[Parameters.scala 53:50]
      wire _T_459 : UInt<1>[1] @[Parameters.scala 255:27]
      _T_459 is invalid @[Parameters.scala 255:27]
      _T_459[0] <= _T_456 @[Parameters.scala 255:27]
      node _T_465 = lt(io.in.d.bits.sink, UInt<1>("h00")) @[Monitor.scala 250:68]
      node _T_466 = or(UInt<1>("h01"), _T_465) @[Monitor.scala 250:53]
      node _T_468 = eq(io.in.d.bits.opcode, UInt<3>("h06")) @[Monitor.scala 252:25]
      when _T_468 : @[Monitor.scala 252:52]
        node _T_469 = bits(reset, 0, 0) @[Monitor.scala 253:14]
        node _T_470 = or(_T_459[0], _T_469) @[Monitor.scala 253:14]
        node _T_472 = eq(_T_470, UInt<1>("h00")) @[Monitor.scala 253:14]
        when _T_472 : @[Monitor.scala 253:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:253 assert (source_ok, \"'D' channel ReleaseAck carries invalid source ID\" + extra)\n") @[Monitor.scala 253:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 253:14]
          skip @[Monitor.scala 253:14]
        node _T_473 = bits(reset, 0, 0) @[Monitor.scala 254:14]
        node _T_474 = or(_T_466, _T_473) @[Monitor.scala 254:14]
        node _T_476 = eq(_T_474, UInt<1>("h00")) @[Monitor.scala 254:14]
        when _T_476 : @[Monitor.scala 254:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:254 assert (sink_ok, \"'D' channel ReleaseAck carries invalid sink ID\" + extra)\n") @[Monitor.scala 254:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 254:14]
          skip @[Monitor.scala 254:14]
        node _T_478 = geq(io.in.d.bits.size, UInt<2>("h02")) @[Monitor.scala 255:27]
        node _T_479 = bits(reset, 0, 0) @[Monitor.scala 255:14]
        node _T_480 = or(_T_478, _T_479) @[Monitor.scala 255:14]
        node _T_482 = eq(_T_480, UInt<1>("h00")) @[Monitor.scala 255:14]
        when _T_482 : @[Monitor.scala 255:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:255 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel ReleaseAck smaller than a beat\" + extra)\n") @[Monitor.scala 255:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 255:14]
          skip @[Monitor.scala 255:14]
        node _T_484 = eq(io.in.d.bits.param, UInt<1>("h00")) @[Monitor.scala 256:28]
        node _T_485 = bits(reset, 0, 0) @[Monitor.scala 256:14]
        node _T_486 = or(_T_484, _T_485) @[Monitor.scala 256:14]
        node _T_488 = eq(_T_486, UInt<1>("h00")) @[Monitor.scala 256:14]
        when _T_488 : @[Monitor.scala 256:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:256 assert (bundle.param === UInt(0), \"'D' channel ReleaseeAck carries invalid param\" + extra)\n") @[Monitor.scala 256:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 256:14]
          skip @[Monitor.scala 256:14]
        skip @[Monitor.scala 252:52]
      node _T_490 = eq(io.in.d.bits.opcode, UInt<3>("h04")) @[Monitor.scala 259:25]
      when _T_490 : @[Monitor.scala 259:47]
        node _T_491 = bits(reset, 0, 0) @[Monitor.scala 260:14]
        node _T_492 = or(_T_459[0], _T_491) @[Monitor.scala 260:14]
        node _T_494 = eq(_T_492, UInt<1>("h00")) @[Monitor.scala 260:14]
        when _T_494 : @[Monitor.scala 260:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:260 assert (source_ok, \"'D' channel Grant carries invalid source ID\" + extra)\n") @[Monitor.scala 260:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 260:14]
          skip @[Monitor.scala 260:14]
        node _T_495 = bits(reset, 0, 0) @[Monitor.scala 261:14]
        node _T_496 = or(_T_466, _T_495) @[Monitor.scala 261:14]
        node _T_498 = eq(_T_496, UInt<1>("h00")) @[Monitor.scala 261:14]
        when _T_498 : @[Monitor.scala 261:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:261 assert (sink_ok, \"'D' channel Grant carries invalid sink ID\" + extra)\n") @[Monitor.scala 261:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 261:14]
          skip @[Monitor.scala 261:14]
        node _T_500 = geq(io.in.d.bits.size, UInt<2>("h02")) @[Monitor.scala 262:27]
        node _T_501 = bits(reset, 0, 0) @[Monitor.scala 262:14]
        node _T_502 = or(_T_500, _T_501) @[Monitor.scala 262:14]
        node _T_504 = eq(_T_502, UInt<1>("h00")) @[Monitor.scala 262:14]
        when _T_504 : @[Monitor.scala 262:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel Grant smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:262 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel Grant smaller than a beat\" + extra)\n") @[Monitor.scala 262:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 262:14]
          skip @[Monitor.scala 262:14]
        node _T_506 = leq(io.in.d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node _T_507 = bits(reset, 0, 0) @[Monitor.scala 263:14]
        node _T_508 = or(_T_506, _T_507) @[Monitor.scala 263:14]
        node _T_510 = eq(_T_508, UInt<1>("h00")) @[Monitor.scala 263:14]
        when _T_510 : @[Monitor.scala 263:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:263 assert (TLPermissions.isCap(bundle.param), \"'D' channel Grant carries invalid cap param\" + extra)\n") @[Monitor.scala 263:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 263:14]
          skip @[Monitor.scala 263:14]
        skip @[Monitor.scala 259:47]
      node _T_512 = eq(io.in.d.bits.opcode, UInt<3>("h05")) @[Monitor.scala 266:25]
      when _T_512 : @[Monitor.scala 266:51]
        node _T_513 = bits(reset, 0, 0) @[Monitor.scala 267:14]
        node _T_514 = or(_T_459[0], _T_513) @[Monitor.scala 267:14]
        node _T_516 = eq(_T_514, UInt<1>("h00")) @[Monitor.scala 267:14]
        when _T_516 : @[Monitor.scala 267:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:267 assert (source_ok, \"'D' channel GrantData carries invalid source ID\" + extra)\n") @[Monitor.scala 267:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 267:14]
          skip @[Monitor.scala 267:14]
        node _T_517 = bits(reset, 0, 0) @[Monitor.scala 268:14]
        node _T_518 = or(_T_466, _T_517) @[Monitor.scala 268:14]
        node _T_520 = eq(_T_518, UInt<1>("h00")) @[Monitor.scala 268:14]
        when _T_520 : @[Monitor.scala 268:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:268 assert (sink_ok, \"'D' channel GrantData carries invalid sink ID\" + extra)\n") @[Monitor.scala 268:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 268:14]
          skip @[Monitor.scala 268:14]
        node _T_522 = geq(io.in.d.bits.size, UInt<2>("h02")) @[Monitor.scala 269:27]
        node _T_523 = bits(reset, 0, 0) @[Monitor.scala 269:14]
        node _T_524 = or(_T_522, _T_523) @[Monitor.scala 269:14]
        node _T_526 = eq(_T_524, UInt<1>("h00")) @[Monitor.scala 269:14]
        when _T_526 : @[Monitor.scala 269:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:269 assert (bundle.size >= UInt(log2Ceil(edge.manager.beatBytes)), \"'D' channel GrantData smaller than a beat\" + extra)\n") @[Monitor.scala 269:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 269:14]
          skip @[Monitor.scala 269:14]
        node _T_528 = leq(io.in.d.bits.param, UInt<2>("h02")) @[Bundles.scala 65:26]
        node _T_529 = bits(reset, 0, 0) @[Monitor.scala 270:14]
        node _T_530 = or(_T_528, _T_529) @[Monitor.scala 270:14]
        node _T_532 = eq(_T_530, UInt<1>("h00")) @[Monitor.scala 270:14]
        when _T_532 : @[Monitor.scala 270:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:270 assert (TLPermissions.isCap(bundle.param), \"'D' channel GrantData carries invalid cap param\" + extra)\n") @[Monitor.scala 270:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 270:14]
          skip @[Monitor.scala 270:14]
        skip @[Monitor.scala 266:51]
      node _T_534 = eq(io.in.d.bits.opcode, UInt<1>("h00")) @[Monitor.scala 273:25]
      when _T_534 : @[Monitor.scala 273:51]
        node _T_535 = bits(reset, 0, 0) @[Monitor.scala 274:14]
        node _T_536 = or(_T_459[0], _T_535) @[Monitor.scala 274:14]
        node _T_538 = eq(_T_536, UInt<1>("h00")) @[Monitor.scala 274:14]
        when _T_538 : @[Monitor.scala 274:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:274 assert (source_ok, \"'D' channel AccessAck carries invalid source ID\" + extra)\n") @[Monitor.scala 274:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 274:14]
          skip @[Monitor.scala 274:14]
        node _T_539 = bits(reset, 0, 0) @[Monitor.scala 275:14]
        node _T_540 = or(_T_466, _T_539) @[Monitor.scala 275:14]
        node _T_542 = eq(_T_540, UInt<1>("h00")) @[Monitor.scala 275:14]
        when _T_542 : @[Monitor.scala 275:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:275 assert (sink_ok, \"'D' channel AccessAck carries invalid sink ID\" + extra)\n") @[Monitor.scala 275:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 275:14]
          skip @[Monitor.scala 275:14]
        node _T_544 = eq(io.in.d.bits.param, UInt<1>("h00")) @[Monitor.scala 277:28]
        node _T_545 = bits(reset, 0, 0) @[Monitor.scala 277:14]
        node _T_546 = or(_T_544, _T_545) @[Monitor.scala 277:14]
        node _T_548 = eq(_T_546, UInt<1>("h00")) @[Monitor.scala 277:14]
        when _T_548 : @[Monitor.scala 277:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:277 assert (bundle.param === UInt(0), \"'D' channel AccessAck carries invalid param\" + extra)\n") @[Monitor.scala 277:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 277:14]
          skip @[Monitor.scala 277:14]
        skip @[Monitor.scala 273:51]
      node _T_550 = eq(io.in.d.bits.opcode, UInt<1>("h01")) @[Monitor.scala 280:25]
      when _T_550 : @[Monitor.scala 280:55]
        node _T_551 = bits(reset, 0, 0) @[Monitor.scala 281:14]
        node _T_552 = or(_T_459[0], _T_551) @[Monitor.scala 281:14]
        node _T_554 = eq(_T_552, UInt<1>("h00")) @[Monitor.scala 281:14]
        when _T_554 : @[Monitor.scala 281:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:281 assert (source_ok, \"'D' channel AccessAckData carries invalid source ID\" + extra)\n") @[Monitor.scala 281:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 281:14]
          skip @[Monitor.scala 281:14]
        node _T_555 = bits(reset, 0, 0) @[Monitor.scala 282:14]
        node _T_556 = or(_T_466, _T_555) @[Monitor.scala 282:14]
        node _T_558 = eq(_T_556, UInt<1>("h00")) @[Monitor.scala 282:14]
        when _T_558 : @[Monitor.scala 282:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:282 assert (sink_ok, \"'D' channel AccessAckData carries invalid sink ID\" + extra)\n") @[Monitor.scala 282:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 282:14]
          skip @[Monitor.scala 282:14]
        node _T_560 = eq(io.in.d.bits.param, UInt<1>("h00")) @[Monitor.scala 284:28]
        node _T_561 = bits(reset, 0, 0) @[Monitor.scala 284:14]
        node _T_562 = or(_T_560, _T_561) @[Monitor.scala 284:14]
        node _T_564 = eq(_T_562, UInt<1>("h00")) @[Monitor.scala 284:14]
        when _T_564 : @[Monitor.scala 284:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:284 assert (bundle.param === UInt(0), \"'D' channel AccessAckData carries invalid param\" + extra)\n") @[Monitor.scala 284:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 284:14]
          skip @[Monitor.scala 284:14]
        skip @[Monitor.scala 280:55]
      node _T_566 = eq(io.in.d.bits.opcode, UInt<2>("h02")) @[Monitor.scala 287:25]
      when _T_566 : @[Monitor.scala 287:49]
        node _T_567 = bits(reset, 0, 0) @[Monitor.scala 288:14]
        node _T_568 = or(_T_459[0], _T_567) @[Monitor.scala 288:14]
        node _T_570 = eq(_T_568, UInt<1>("h00")) @[Monitor.scala 288:14]
        when _T_570 : @[Monitor.scala 288:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:288 assert (source_ok, \"'D' channel HintAck carries invalid source ID\" + extra)\n") @[Monitor.scala 288:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 288:14]
          skip @[Monitor.scala 288:14]
        node _T_571 = bits(reset, 0, 0) @[Monitor.scala 289:14]
        node _T_572 = or(_T_466, _T_571) @[Monitor.scala 289:14]
        node _T_574 = eq(_T_572, UInt<1>("h00")) @[Monitor.scala 289:14]
        when _T_574 : @[Monitor.scala 289:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid sink ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:289 assert (sink_ok, \"'D' channel HintAck carries invalid sink ID\" + extra)\n") @[Monitor.scala 289:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 289:14]
          skip @[Monitor.scala 289:14]
        node _T_576 = eq(io.in.d.bits.param, UInt<1>("h00")) @[Monitor.scala 291:28]
        node _T_577 = bits(reset, 0, 0) @[Monitor.scala 291:14]
        node _T_578 = or(_T_576, _T_577) @[Monitor.scala 291:14]
        node _T_580 = eq(_T_578, UInt<1>("h00")) @[Monitor.scala 291:14]
        when _T_580 : @[Monitor.scala 291:14]
          printf(clock, UInt<1>(1), "Assertion failed: 'D' channel HintAck carries invalid param (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:291 assert (bundle.param === UInt(0), \"'D' channel HintAck carries invalid param\" + extra)\n") @[Monitor.scala 291:14]
          stop(clock, UInt<1>(1), 1) @[Monitor.scala 291:14]
          skip @[Monitor.scala 291:14]
        skip @[Monitor.scala 287:49]
      skip @[Monitor.scala 302:27]
    node _T_582 = eq(io.in.b.valid, UInt<1>("h00")) @[Monitor.scala 308:15]
    node _T_583 = bits(reset, 0, 0) @[Monitor.scala 308:14]
    node _T_584 = or(_T_582, _T_583) @[Monitor.scala 308:14]
    node _T_586 = eq(_T_584, UInt<1>("h00")) @[Monitor.scala 308:14]
    when _T_586 : @[Monitor.scala 308:14]
      printf(clock, UInt<1>(1), "Assertion failed: 'B' channel valid and not TL-C (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:308 assert (!bundle.b.valid, \"'B' channel valid and not TL-C\" + extra)\n") @[Monitor.scala 308:14]
      stop(clock, UInt<1>(1), 1) @[Monitor.scala 308:14]
      skip @[Monitor.scala 308:14]
    node _T_588 = eq(io.in.c.valid, UInt<1>("h00")) @[Monitor.scala 309:15]
    node _T_589 = bits(reset, 0, 0) @[Monitor.scala 309:14]
    node _T_590 = or(_T_588, _T_589) @[Monitor.scala 309:14]
    node _T_592 = eq(_T_590, UInt<1>("h00")) @[Monitor.scala 309:14]
    when _T_592 : @[Monitor.scala 309:14]
      printf(clock, UInt<1>(1), "Assertion failed: 'C' channel valid and not TL-C (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:309 assert (!bundle.c.valid, \"'C' channel valid and not TL-C\" + extra)\n") @[Monitor.scala 309:14]
      stop(clock, UInt<1>(1), 1) @[Monitor.scala 309:14]
      skip @[Monitor.scala 309:14]
    node _T_594 = eq(io.in.e.valid, UInt<1>("h00")) @[Monitor.scala 310:15]
    node _T_595 = bits(reset, 0, 0) @[Monitor.scala 310:14]
    node _T_596 = or(_T_594, _T_595) @[Monitor.scala 310:14]
    node _T_598 = eq(_T_596, UInt<1>("h00")) @[Monitor.scala 310:14]
    when _T_598 : @[Monitor.scala 310:14]
      printf(clock, UInt<1>(1), "Assertion failed: 'E' channel valid and not TL-C (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:310 assert (!bundle.e.valid, \"'E' channel valid and not TL-C\" + extra)\n") @[Monitor.scala 310:14]
      stop(clock, UInt<1>(1), 1) @[Monitor.scala 310:14]
      skip @[Monitor.scala 310:14]
    node _T_599 = and(io.in.a.ready, io.in.a.valid) @[Bundles.scala 207:36]
    node _T_601 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 104:70]
    node _T_602 = dshl(_T_601, io.in.a.bits.size) @[package.scala 104:77]
    node _T_603 = bits(_T_602, 1, 0) @[package.scala 104:82]
    node _T_604 = not(_T_603) @[package.scala 104:46]
    node _T_605 = shr(_T_604, 2) @[Edges.scala 211:59]
    node _T_606 = bits(io.in.a.bits.opcode, 2, 2) @[Edges.scala 92:37]
    node _T_608 = eq(_T_606, UInt<1>("h00")) @[Edges.scala 92:28]
    node _T_610 = mux(_T_608, _T_605, UInt<1>("h00")) @[Edges.scala 212:14]
    reg _T_613 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Edges.scala 220:27]
    node _T_615 = sub(_T_613, UInt<1>("h01")) @[Edges.scala 221:28]
    node _T_616 = asUInt(_T_615) @[Edges.scala 221:28]
    node _T_617 = tail(_T_616, 1) @[Edges.scala 221:28]
    node _T_619 = eq(_T_613, UInt<1>("h00")) @[Edges.scala 222:25]
    node _T_621 = eq(_T_613, UInt<1>("h01")) @[Edges.scala 223:25]
    node _T_623 = eq(_T_610, UInt<1>("h00")) @[Edges.scala 223:47]
    node _T_624 = or(_T_621, _T_623) @[Edges.scala 223:37]
    node _T_625 = and(_T_624, _T_599) @[Edges.scala 224:22]
    node _T_626 = not(_T_617) @[Edges.scala 225:27]
    node _T_627 = and(_T_610, _T_626) @[Edges.scala 225:25]
    when _T_599 : @[Edges.scala 226:17]
      node _T_628 = mux(_T_619, _T_610, _T_617) @[Edges.scala 227:21]
      _T_613 <= _T_628 @[Edges.scala 227:15]
      skip @[Edges.scala 226:17]
    reg _T_630 : UInt, clock @[Monitor.scala 316:22]
    reg _T_632 : UInt, clock @[Monitor.scala 317:22]
    reg _T_634 : UInt, clock @[Monitor.scala 318:22]
    reg _T_636 : UInt, clock @[Monitor.scala 319:22]
    reg _T_638 : UInt, clock @[Monitor.scala 320:22]
    node _T_640 = eq(_T_619, UInt<1>("h00")) @[Monitor.scala 321:22]
    node _T_641 = and(io.in.a.valid, _T_640) @[Monitor.scala 321:19]
    when _T_641 : @[Monitor.scala 321:32]
      node _T_642 = eq(io.in.a.bits.opcode, _T_630) @[Monitor.scala 322:29]
      node _T_643 = bits(reset, 0, 0) @[Monitor.scala 322:14]
      node _T_644 = or(_T_642, _T_643) @[Monitor.scala 322:14]
      node _T_646 = eq(_T_644, UInt<1>("h00")) @[Monitor.scala 322:14]
      when _T_646 : @[Monitor.scala 322:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:322 assert (a.bits.opcode === opcode, \"'A' channel opcode changed within multibeat operation\" + extra)\n") @[Monitor.scala 322:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 322:14]
        skip @[Monitor.scala 322:14]
      node _T_647 = eq(io.in.a.bits.param, _T_632) @[Monitor.scala 323:29]
      node _T_648 = bits(reset, 0, 0) @[Monitor.scala 323:14]
      node _T_649 = or(_T_647, _T_648) @[Monitor.scala 323:14]
      node _T_651 = eq(_T_649, UInt<1>("h00")) @[Monitor.scala 323:14]
      when _T_651 : @[Monitor.scala 323:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'A' channel param changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:323 assert (a.bits.param  === param,  \"'A' channel param changed within multibeat operation\" + extra)\n") @[Monitor.scala 323:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 323:14]
        skip @[Monitor.scala 323:14]
      node _T_652 = eq(io.in.a.bits.size, _T_634) @[Monitor.scala 324:29]
      node _T_653 = bits(reset, 0, 0) @[Monitor.scala 324:14]
      node _T_654 = or(_T_652, _T_653) @[Monitor.scala 324:14]
      node _T_656 = eq(_T_654, UInt<1>("h00")) @[Monitor.scala 324:14]
      when _T_656 : @[Monitor.scala 324:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'A' channel size changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:324 assert (a.bits.size   === size,   \"'A' channel size changed within multibeat operation\" + extra)\n") @[Monitor.scala 324:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 324:14]
        skip @[Monitor.scala 324:14]
      node _T_657 = eq(io.in.a.bits.source, _T_636) @[Monitor.scala 325:29]
      node _T_658 = bits(reset, 0, 0) @[Monitor.scala 325:14]
      node _T_659 = or(_T_657, _T_658) @[Monitor.scala 325:14]
      node _T_661 = eq(_T_659, UInt<1>("h00")) @[Monitor.scala 325:14]
      when _T_661 : @[Monitor.scala 325:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'A' channel source changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:325 assert (a.bits.source === source, \"'A' channel source changed within multibeat operation\" + extra)\n") @[Monitor.scala 325:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 325:14]
        skip @[Monitor.scala 325:14]
      node _T_662 = eq(io.in.a.bits.address, _T_638) @[Monitor.scala 326:29]
      node _T_663 = bits(reset, 0, 0) @[Monitor.scala 326:14]
      node _T_664 = or(_T_662, _T_663) @[Monitor.scala 326:14]
      node _T_666 = eq(_T_664, UInt<1>("h00")) @[Monitor.scala 326:14]
      when _T_666 : @[Monitor.scala 326:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'A' channel address changed with multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:326 assert (a.bits.address=== address,\"'A' channel address changed with multibeat operation\" + extra)\n") @[Monitor.scala 326:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 326:14]
        skip @[Monitor.scala 326:14]
      skip @[Monitor.scala 321:32]
    node _T_667 = and(io.in.a.ready, io.in.a.valid) @[Bundles.scala 207:36]
    node _T_668 = and(_T_667, _T_619) @[Monitor.scala 328:20]
    when _T_668 : @[Monitor.scala 328:32]
      _T_630 <= io.in.a.bits.opcode @[Monitor.scala 329:15]
      _T_632 <= io.in.a.bits.param @[Monitor.scala 330:15]
      _T_634 <= io.in.a.bits.size @[Monitor.scala 331:15]
      _T_636 <= io.in.a.bits.source @[Monitor.scala 332:15]
      _T_638 <= io.in.a.bits.address @[Monitor.scala 333:15]
      skip @[Monitor.scala 328:32]
    node _T_669 = and(io.in.d.ready, io.in.d.valid) @[Bundles.scala 207:36]
    node _T_671 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 104:70]
    node _T_672 = dshl(_T_671, io.in.d.bits.size) @[package.scala 104:77]
    node _T_673 = bits(_T_672, 1, 0) @[package.scala 104:82]
    node _T_674 = not(_T_673) @[package.scala 104:46]
    node _T_675 = shr(_T_674, 2) @[Edges.scala 211:59]
    node _T_676 = bits(io.in.d.bits.opcode, 0, 0) @[Edges.scala 106:36]
    node _T_678 = mux(_T_676, _T_675, UInt<1>("h00")) @[Edges.scala 212:14]
    reg _T_681 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Edges.scala 220:27]
    node _T_683 = sub(_T_681, UInt<1>("h01")) @[Edges.scala 221:28]
    node _T_684 = asUInt(_T_683) @[Edges.scala 221:28]
    node _T_685 = tail(_T_684, 1) @[Edges.scala 221:28]
    node _T_687 = eq(_T_681, UInt<1>("h00")) @[Edges.scala 222:25]
    node _T_689 = eq(_T_681, UInt<1>("h01")) @[Edges.scala 223:25]
    node _T_691 = eq(_T_678, UInt<1>("h00")) @[Edges.scala 223:47]
    node _T_692 = or(_T_689, _T_691) @[Edges.scala 223:37]
    node _T_693 = and(_T_692, _T_669) @[Edges.scala 224:22]
    node _T_694 = not(_T_685) @[Edges.scala 225:27]
    node _T_695 = and(_T_678, _T_694) @[Edges.scala 225:25]
    when _T_669 : @[Edges.scala 226:17]
      node _T_696 = mux(_T_687, _T_678, _T_685) @[Edges.scala 227:21]
      _T_681 <= _T_696 @[Edges.scala 227:15]
      skip @[Edges.scala 226:17]
    reg _T_698 : UInt, clock @[Monitor.scala 387:22]
    reg _T_700 : UInt, clock @[Monitor.scala 388:22]
    reg _T_702 : UInt, clock @[Monitor.scala 389:22]
    reg _T_704 : UInt, clock @[Monitor.scala 390:22]
    reg _T_706 : UInt, clock @[Monitor.scala 391:22]
    node _T_707 = and(io.in.d.ready, io.in.d.valid) @[Bundles.scala 207:36]
    reg _T_709 : UInt<1>, clock @[Reg.scala 11:16]
    when _T_707 : @[Reg.scala 12:19]
      _T_709 <= io.in.d.bits.error @[Reg.scala 12:23]
      skip @[Reg.scala 12:19]
    node _T_711 = eq(_T_687, UInt<1>("h00")) @[Monitor.scala 393:22]
    node _T_712 = and(io.in.d.valid, _T_711) @[Monitor.scala 393:19]
    when _T_712 : @[Monitor.scala 393:32]
      node _T_713 = eq(io.in.d.bits.opcode, _T_698) @[Monitor.scala 394:29]
      node _T_714 = bits(reset, 0, 0) @[Monitor.scala 394:14]
      node _T_715 = or(_T_713, _T_714) @[Monitor.scala 394:14]
      node _T_717 = eq(_T_715, UInt<1>("h00")) @[Monitor.scala 394:14]
      when _T_717 : @[Monitor.scala 394:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:394 assert (d.bits.opcode === opcode, \"'D' channel opcode changed within multibeat operation\" + extra)\n") @[Monitor.scala 394:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 394:14]
        skip @[Monitor.scala 394:14]
      node _T_718 = eq(io.in.d.bits.param, _T_700) @[Monitor.scala 395:29]
      node _T_719 = bits(reset, 0, 0) @[Monitor.scala 395:14]
      node _T_720 = or(_T_718, _T_719) @[Monitor.scala 395:14]
      node _T_722 = eq(_T_720, UInt<1>("h00")) @[Monitor.scala 395:14]
      when _T_722 : @[Monitor.scala 395:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel param changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:395 assert (d.bits.param  === param,  \"'D' channel param changed within multibeat operation\" + extra)\n") @[Monitor.scala 395:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 395:14]
        skip @[Monitor.scala 395:14]
      node _T_723 = eq(io.in.d.bits.size, _T_702) @[Monitor.scala 396:29]
      node _T_724 = bits(reset, 0, 0) @[Monitor.scala 396:14]
      node _T_725 = or(_T_723, _T_724) @[Monitor.scala 396:14]
      node _T_727 = eq(_T_725, UInt<1>("h00")) @[Monitor.scala 396:14]
      when _T_727 : @[Monitor.scala 396:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel size changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:396 assert (d.bits.size   === size,   \"'D' channel size changed within multibeat operation\" + extra)\n") @[Monitor.scala 396:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 396:14]
        skip @[Monitor.scala 396:14]
      node _T_728 = eq(io.in.d.bits.source, _T_704) @[Monitor.scala 397:29]
      node _T_729 = bits(reset, 0, 0) @[Monitor.scala 397:14]
      node _T_730 = or(_T_728, _T_729) @[Monitor.scala 397:14]
      node _T_732 = eq(_T_730, UInt<1>("h00")) @[Monitor.scala 397:14]
      when _T_732 : @[Monitor.scala 397:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel source changed within multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:397 assert (d.bits.source === source, \"'D' channel source changed within multibeat operation\" + extra)\n") @[Monitor.scala 397:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 397:14]
        skip @[Monitor.scala 397:14]
      node _T_733 = eq(io.in.d.bits.sink, _T_706) @[Monitor.scala 398:29]
      node _T_734 = bits(reset, 0, 0) @[Monitor.scala 398:14]
      node _T_735 = or(_T_733, _T_734) @[Monitor.scala 398:14]
      node _T_737 = eq(_T_735, UInt<1>("h00")) @[Monitor.scala 398:14]
      when _T_737 : @[Monitor.scala 398:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:398 assert (d.bits.sink   === sink,   \"'D' channel sink changed with multibeat operation\" + extra)\n") @[Monitor.scala 398:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 398:14]
        skip @[Monitor.scala 398:14]
      node _T_739 = eq(_T_709, UInt<1>("h00")) @[Monitor.scala 399:31]
      node _T_740 = or(io.in.d.bits.error, _T_739) @[Monitor.scala 399:28]
      node _T_741 = bits(reset, 0, 0) @[Monitor.scala 399:14]
      node _T_742 = or(_T_740, _T_741) @[Monitor.scala 399:14]
      node _T_744 = eq(_T_742, UInt<1>("h00")) @[Monitor.scala 399:14]
      when _T_744 : @[Monitor.scala 399:14]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel burst lowered error (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:399 assert (d.bits.error || !error,   \"'D' channel burst lowered error\" + extra)\n") @[Monitor.scala 399:14]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 399:14]
        skip @[Monitor.scala 399:14]
      skip @[Monitor.scala 393:32]
    node _T_745 = and(io.in.d.ready, io.in.d.valid) @[Bundles.scala 207:36]
    node _T_746 = and(_T_745, _T_687) @[Monitor.scala 401:20]
    when _T_746 : @[Monitor.scala 401:32]
      _T_698 <= io.in.d.bits.opcode @[Monitor.scala 402:15]
      _T_700 <= io.in.d.bits.param @[Monitor.scala 403:15]
      _T_702 <= io.in.d.bits.size @[Monitor.scala 404:15]
      _T_704 <= io.in.d.bits.source @[Monitor.scala 405:15]
      _T_706 <= io.in.d.bits.sink @[Monitor.scala 406:15]
      skip @[Monitor.scala 401:32]
    reg _T_749 : UInt<128>, clock with : (reset => (reset, UInt<128>("h00"))) @[Monitor.scala 420:27]
    node _T_750 = and(io.in.a.ready, io.in.a.valid) @[Bundles.scala 207:36]
    node _T_752 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 104:70]
    node _T_753 = dshl(_T_752, io.in.a.bits.size) @[package.scala 104:77]
    node _T_754 = bits(_T_753, 1, 0) @[package.scala 104:82]
    node _T_755 = not(_T_754) @[package.scala 104:46]
    node _T_756 = shr(_T_755, 2) @[Edges.scala 211:59]
    node _T_757 = bits(io.in.a.bits.opcode, 2, 2) @[Edges.scala 92:37]
    node _T_759 = eq(_T_757, UInt<1>("h00")) @[Edges.scala 92:28]
    node _T_761 = mux(_T_759, _T_756, UInt<1>("h00")) @[Edges.scala 212:14]
    reg _T_764 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Edges.scala 220:27]
    node _T_766 = sub(_T_764, UInt<1>("h01")) @[Edges.scala 221:28]
    node _T_767 = asUInt(_T_766) @[Edges.scala 221:28]
    node _T_768 = tail(_T_767, 1) @[Edges.scala 221:28]
    node _T_770 = eq(_T_764, UInt<1>("h00")) @[Edges.scala 222:25]
    node _T_772 = eq(_T_764, UInt<1>("h01")) @[Edges.scala 223:25]
    node _T_774 = eq(_T_761, UInt<1>("h00")) @[Edges.scala 223:47]
    node _T_775 = or(_T_772, _T_774) @[Edges.scala 223:37]
    node _T_776 = and(_T_775, _T_750) @[Edges.scala 224:22]
    node _T_777 = not(_T_768) @[Edges.scala 225:27]
    node _T_778 = and(_T_761, _T_777) @[Edges.scala 225:25]
    when _T_750 : @[Edges.scala 226:17]
      node _T_779 = mux(_T_770, _T_761, _T_768) @[Edges.scala 227:21]
      _T_764 <= _T_779 @[Edges.scala 227:15]
      skip @[Edges.scala 226:17]
    node _T_780 = and(io.in.d.ready, io.in.d.valid) @[Bundles.scala 207:36]
    node _T_782 = asUInt(asSInt(UInt<2>("h03"))) @[package.scala 104:70]
    node _T_783 = dshl(_T_782, io.in.d.bits.size) @[package.scala 104:77]
    node _T_784 = bits(_T_783, 1, 0) @[package.scala 104:82]
    node _T_785 = not(_T_784) @[package.scala 104:46]
    node _T_786 = shr(_T_785, 2) @[Edges.scala 211:59]
    node _T_787 = bits(io.in.d.bits.opcode, 0, 0) @[Edges.scala 106:36]
    node _T_789 = mux(_T_787, _T_786, UInt<1>("h00")) @[Edges.scala 212:14]
    reg _T_792 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Edges.scala 220:27]
    node _T_794 = sub(_T_792, UInt<1>("h01")) @[Edges.scala 221:28]
    node _T_795 = asUInt(_T_794) @[Edges.scala 221:28]
    node _T_796 = tail(_T_795, 1) @[Edges.scala 221:28]
    node _T_798 = eq(_T_792, UInt<1>("h00")) @[Edges.scala 222:25]
    node _T_800 = eq(_T_792, UInt<1>("h01")) @[Edges.scala 223:25]
    node _T_802 = eq(_T_789, UInt<1>("h00")) @[Edges.scala 223:47]
    node _T_803 = or(_T_800, _T_802) @[Edges.scala 223:37]
    node _T_804 = and(_T_803, _T_780) @[Edges.scala 224:22]
    node _T_805 = not(_T_796) @[Edges.scala 225:27]
    node _T_806 = and(_T_789, _T_805) @[Edges.scala 225:25]
    when _T_780 : @[Edges.scala 226:17]
      node _T_807 = mux(_T_798, _T_789, _T_796) @[Edges.scala 227:21]
      _T_792 <= _T_807 @[Edges.scala 227:15]
      skip @[Edges.scala 226:17]
    wire _T_810 : UInt<128>
    _T_810 is invalid
    _T_810 <= UInt<128>("h00")
    node _T_811 = and(io.in.a.ready, io.in.a.valid) @[Bundles.scala 207:36]
    node _T_812 = and(_T_811, _T_770) @[Monitor.scala 426:27]
    node _T_814 = and(_T_812, UInt<1>("h01")) @[Monitor.scala 426:38]
    when _T_814 : @[Monitor.scala 426:72]
      node _T_816 = dshl(UInt<1>("h01"), io.in.a.bits.source) @[OneHot.scala 45:35]
      _T_810 <= _T_816 @[Monitor.scala 427:13]
      node _T_817 = dshr(_T_749, io.in.a.bits.source) @[Monitor.scala 428:23]
      node _T_818 = bits(_T_817, 0, 0) @[Monitor.scala 428:23]
      node _T_820 = eq(_T_818, UInt<1>("h00")) @[Monitor.scala 428:14]
      node _T_821 = bits(reset, 0, 0) @[Monitor.scala 428:13]
      node _T_822 = or(_T_820, _T_821) @[Monitor.scala 428:13]
      node _T_824 = eq(_T_822, UInt<1>("h00")) @[Monitor.scala 428:13]
      when _T_824 : @[Monitor.scala 428:13]
        printf(clock, UInt<1>(1), "Assertion failed: 'A' channel re-used a source ID (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:428 assert(!inflight(bundle.a.bits.source), \"'A' channel re-used a source ID\" + extra)\n") @[Monitor.scala 428:13]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 428:13]
        skip @[Monitor.scala 428:13]
      skip @[Monitor.scala 426:72]
    wire _T_827 : UInt<128>
    _T_827 is invalid
    _T_827 <= UInt<128>("h00")
    node _T_829 = eq(io.in.d.bits.opcode, UInt<3>("h06")) @[Monitor.scala 432:46]
    node _T_830 = and(io.in.d.ready, io.in.d.valid) @[Bundles.scala 207:36]
    node _T_831 = and(_T_830, _T_798) @[Monitor.scala 433:27]
    node _T_833 = and(_T_831, UInt<1>("h01")) @[Monitor.scala 433:38]
    node _T_835 = eq(_T_829, UInt<1>("h00")) @[Monitor.scala 433:75]
    node _T_836 = and(_T_833, _T_835) @[Monitor.scala 433:72]
    when _T_836 : @[Monitor.scala 433:91]
      node _T_838 = dshl(UInt<1>("h01"), io.in.d.bits.source) @[OneHot.scala 45:35]
      _T_827 <= _T_838 @[Monitor.scala 434:13]
      node _T_839 = or(_T_810, _T_749) @[Monitor.scala 435:21]
      node _T_840 = dshr(_T_839, io.in.d.bits.source) @[Monitor.scala 435:32]
      node _T_841 = bits(_T_840, 0, 0) @[Monitor.scala 435:32]
      node _T_842 = bits(reset, 0, 0) @[Monitor.scala 435:13]
      node _T_843 = or(_T_841, _T_842) @[Monitor.scala 435:13]
      node _T_845 = eq(_T_843, UInt<1>("h00")) @[Monitor.scala 435:13]
      when _T_845 : @[Monitor.scala 435:13]
        printf(clock, UInt<1>(1), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:435 assert((a_set | inflight)(bundle.d.bits.source), \"'D' channel acknowledged for nothing inflight\" + extra)\n") @[Monitor.scala 435:13]
        stop(clock, UInt<1>(1), 1) @[Monitor.scala 435:13]
        skip @[Monitor.scala 435:13]
      skip @[Monitor.scala 433:91]
    node _T_846 = or(_T_749, _T_810) @[Monitor.scala 442:27]
    node _T_847 = not(_T_827) @[Monitor.scala 442:38]
    node _T_848 = and(_T_846, _T_847) @[Monitor.scala 442:36]
    _T_749 <= _T_848 @[Monitor.scala 442:14]
    reg _T_851 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Monitor.scala 444:27]
    inst DummyPlusArgReader of DummyPlusArgReader_75 @[PlusArg.scala 32:11]
    DummyPlusArgReader.io is invalid
    DummyPlusArgReader.clock <= clock
    DummyPlusArgReader.reset <= reset
    node _T_853 = neq(_T_749, UInt<1>("h00")) @[Monitor.scala 447:23]
    node _T_855 = eq(_T_853, UInt<1>("h00")) @[Monitor.scala 447:13]
    node _T_857 = eq(DummyPlusArgReader.io.out, UInt<1>("h00")) @[Monitor.scala 447:36]
    node _T_858 = or(_T_855, _T_857) @[Monitor.scala 447:27]
    node _T_859 = lt(_T_851, DummyPlusArgReader.io.out) @[Monitor.scala 447:60]
    node _T_860 = or(_T_858, _T_859) @[Monitor.scala 447:48]
    node _T_861 = bits(reset, 0, 0) @[Monitor.scala 447:12]
    node _T_862 = or(_T_860, _T_861) @[Monitor.scala 447:12]
    node _T_864 = eq(_T_862, UInt<1>("h00")) @[Monitor.scala 447:12]
    when _T_864 : @[Monitor.scala 447:12]
      printf(clock, UInt<1>(1), "Assertion failed: TileLink timeout expired (connected at PeripheryBus.scala:45:34)\n    at Monitor.scala:447 assert (!inflight.orR || limit === UInt(0) || watchdog < limit, \"TileLink timeout expired\" + extra)\n") @[Monitor.scala 447:12]
      stop(clock, UInt<1>(1), 1) @[Monitor.scala 447:12]
      skip @[Monitor.scala 447:12]
    node _T_866 = add(_T_851, UInt<1>("h01")) @[Monitor.scala 449:26]
    node _T_867 = tail(_T_866, 1) @[Monitor.scala 449:26]
    _T_851 <= _T_867 @[Monitor.scala 449:14]
    node _T_868 = and(io.in.a.ready, io.in.a.valid) @[Bundles.scala 207:36]
    node _T_869 = and(io.in.d.ready, io.in.d.valid) @[Bundles.scala 207:36]
    node _T_870 = or(_T_868, _T_869) @[Monitor.scala 450:27]
    when _T_870 : @[Monitor.scala 450:47]
      _T_851 <= UInt<1>("h00") @[Monitor.scala 450:58]
      skip @[Monitor.scala 450:47]
    
  module DummyPlusArgReader_75 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.out <= UInt<1>("h00") @[PlusArg.scala 19:16]
    
